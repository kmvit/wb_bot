"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API-—Ç–æ–∫–µ–Ω–∞–º–∏ Wildberries (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from app.services.wildberries_api import wb_api, WildberriesAPIError, WildberriesAuthError
from app.services.wb_web_auth import get_wb_auth_service, cleanup_wb_auth_service, WBWebAuthError
from app.database.database import AsyncSessionLocal
from app.database.repositories.user_repo import UserRepository


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth_router = Router()


class AuthStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    waiting_for_api_token = State()
    waiting_for_phone = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    waiting_for_sms_code = State()  # –û–∂–∏–¥–∞–Ω–∏–µ SMS –∫–æ–¥–∞


@auth_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wildberries Bot!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ Wildberries —Å —Ä–µ–∞–∫—Ü–∏–µ–π –º–µ–Ω–µ–µ 0.3 —Å–µ–∫—É–Ω–¥—ã.

<b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API-—Ç–æ–∫–µ–Ω:</b>
‚Ä¢ –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Wildberries
‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ‚Üí "–î–æ—Å—Ç—É–ø –∫ API"
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /add_token

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/add_token - –î–æ–±–∞–≤–∏—Ç—å API-—Ç–æ–∫–µ–Ω
/cabinet_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–±–∏–Ω–µ—Ç–µ
/help - –ü–æ–º–æ—â—å
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–±–∏–Ω–µ—Ç–µ", callback_data="cabinet_info")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å API-—Ç–æ–∫–µ–Ω", callback_data="add_token")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")


@auth_router.message(Command("add_token"))
@auth_router.callback_query(F.data == "add_token")
async def cmd_add_token(event: Message | CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API-—Ç–æ–∫–µ–Ω–∞"""
    text = """
üîë <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API-—Ç–æ–∫–µ–Ω–∞</b>

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API-—Ç–æ–∫–µ–Ω–∞:

1Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Wildberries
2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ‚Üí "–î–æ—Å—Ç—É–ø –∫ API"
3Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏:
   ‚Ä¢ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (—á—Ç–µ–Ω–∏–µ)
   ‚Ä¢ –ü–æ—Å—Ç–∞–≤–∫–∏ (—á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å)
   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—á—Ç–µ–Ω–∏–µ)

4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b> –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    
    if isinstance(event, Message):
        await event.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await event.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    
    await state.set_state(AuthStates.waiting_for_api_token)


@auth_router.message(StateFilter(AuthStates.waiting_for_api_token))
async def process_api_token(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ API-—Ç–æ–∫–µ–Ω–∞"""
    api_token = message.text.strip()
    
    if not api_token:
        await message.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é API-—Ç–æ–∫–µ–Ω...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
        async with wb_api:
            is_valid = await wb_api.validate_api_token(api_token)
            
            if not is_valid:
                await processing_msg.edit_text(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π API-—Ç–æ–∫–µ–Ω</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /add_token",
                    parse_mode="HTML"
                )
                await state.clear()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ
            cabinet_info = await wb_api.get_cabinet_info(api_token)
            seller_info = cabinet_info.get('seller_info', {})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            async with AsyncSessionLocal() as session:
                user_repo = UserRepository(session)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await user_repo.get_or_create_user(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
                await user_repo.save_wb_token(user, api_token)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            token_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if cabinet_info.get('api_token_valid') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            test_status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if cabinet_info.get('token_test_passed') else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ —Å–æ–≥–ª–∞—Å–Ω–æ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            seller_name = seller_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            seller_id = seller_info.get('sid', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            trade_mark = seller_info.get('tradeMark', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
            success_text = f"""
‚úÖ <b>API-—Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {seller_name}
‚Ä¢ ID –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller_id}
‚Ä¢ –¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞: {trade_mark}
‚Ä¢ –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: {token_status}
‚Ä¢ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {test_status}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ /cabinet_info - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–±–∏–Ω–µ—Ç–µ
‚Ä¢ –ú–æ–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ - –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
‚Ä¢ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω - –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è


            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–±–∏–Ω–µ—Ç–µ", callback_data="cabinet_info")],
                [InlineKeyboardButton(text="üìä –ú–æ–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏", callback_data="my_monitorings")]
            ])
            
            await processing_msg.edit_text(success_text, reply_markup=keyboard, parse_mode="HTML")
            
    except WildberriesAuthError as e:
        await processing_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n{str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
        logger.warning(f"Auth error for user {message.from_user.id}: {e}")
        
    except WildberriesAPIError as e:
        error_text = str(e)
        if "–ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" in error_text.lower():
            await processing_msg.edit_text(
                f"‚è≥ <b>–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API</b>\n\n"
                f"{error_text}\n\n"
                "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - Wildberries –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
                parse_mode="HTML"
            )
        else:
            await processing_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ API</b>\n\n{error_text}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="HTML"
            )
        logger.error(f"API error for user {message.from_user.id}: {e}")
        
    except Exception as e:
        await processing_msg.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        logger.error(f"Unexpected error processing token for user {message.from_user.id}: {e}")
    
    finally:
        await state.clear()


@auth_router.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
    )


@auth_router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help"""
    help_text = """
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/add_token - –î–æ–±–∞–≤–∏—Ç—å API-—Ç–æ–∫–µ–Ω Wildberries
/cabinet_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–±–∏–Ω–µ—Ç–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API-—Ç–æ–∫–µ–Ω:</b>
1. –í–æ–π–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Wildberries
2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API
3. –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –≤–∞—Å

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
    """
    
    await message.answer(help_text, parse_mode="HTML")


@auth_router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ callback"""
    help_text = """
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/add_token - –î–æ–±–∞–≤–∏—Ç—å API-—Ç–æ–∫–µ–Ω Wildberries
/cabinet_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–±–∏–Ω–µ—Ç–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API-—Ç–æ–∫–µ–Ω:</b>
1. –í–æ–π–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Wildberries
2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API
3. –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –≤–∞—Å

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
    """
    
    await callback.message.edit_text(help_text, parse_mode="HTML")


@auth_router.callback_query(F.data == "start")
async def callback_start(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wildberries Bot!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ Wildberries —Å —Ä–µ–∞–∫—Ü–∏–µ–π –º–µ–Ω–µ–µ 0.3 —Å–µ–∫—É–Ω–¥—ã.

<b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API-—Ç–æ–∫–µ–Ω:</b>
‚Ä¢ –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Wildberries
‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ‚Üí "–î–æ—Å—Ç—É–ø –∫ API"
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /add_token

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/add_token - –î–æ–±–∞–≤–∏—Ç—å API-—Ç–æ–∫–µ–Ω
/cabinet_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–±–∏–Ω–µ—Ç–µ
/help - –ü–æ–º–æ—â—å
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–±–∏–Ω–µ—Ç–µ", callback_data="cabinet_info")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å API-—Ç–æ–∫–µ–Ω", callback_data="add_token")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await callback.message.edit_text(welcome_text, reply_markup=keyboard, parse_mode="HTML")


@auth_router.callback_query(F.data == "phone_auth")
async def start_phone_auth(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(user_id)
        
        if user and user.has_phone_auth():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≤–µ–±-—Å–µ—Å—Å–∏–∏
            session_data = await user_repo.get_phone_auth_session(user)
            is_session_valid = False
            if session_data:
                try:
                    wb_auth_for_test = get_wb_auth_service(user_id=user_id)
                    is_session_valid = await wb_auth_for_test.test_session(session_data)
                    
                    if is_session_valid:
                        logger.info(f"Session is valid for user {user_id}")
                    else:
                        logger.warning(f"Session expired for user {user_id}, clearing...")
                        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à—É—é —Å–µ—Å—Å–∏—é
                        await user_repo.clear_phone_auth(user)
                        await session.commit()
                        
                except Exception as e:
                    logger.error(f"Error testing session for user {user_id}: {e}")
                    is_session_valid = False
                    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    await user_repo.clear_phone_auth(user)
                    await session.commit()

            if is_session_valid:
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ ‚Äî —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤)
                try:
                    callback.data = "auto_booking"
                    from app.bot.handlers.cabinet import callback_auto_booking
                    await callback_auto_booking(callback, state)
                    return
                except Exception as e:
                    logger.error(f"Error opening auto booking for user {user_id}: {e}")
                    # –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —è–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    text = (
                        "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏."
                    )
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="auto_booking")],
                        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="phone_reauth")]
                    ])
                    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                    return
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∏–∂–µ –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    text = """
üì± <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX
2Ô∏è‚É£ –ù–∞ –≤–∞—à –Ω–æ–º–µ—Ä –ø—Ä–∏–¥–µ—Ç SMS —Å –∫–æ–¥–æ–º
3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b> –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±—É–¥—É—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã

<b>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ SMS –∫–æ–¥ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    if state:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ state –Ω–µ None (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤—ã–∑–æ–≤–æ–º –∏–∑ cabinet.py)
        await state.set_state(AuthStates.waiting_for_phone)


@auth_router.message(StateFilter(AuthStates.waiting_for_phone))
async def process_phone_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    user_id = message.from_user.id
    
    logger.info(f"üì± User {user_id} entered phone number: {phone}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.startswith('+7') or len(phone) != 12 or not phone[1:].isdigit():
        logger.warning(f"‚ùå User {user_id} entered invalid phone format: {phone}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º SMS –∫–æ–¥...")
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º SMS –∫–æ–¥
        wb_auth = get_wb_auth_service(user_id=user_id)
        await wb_auth.start_session()  # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
        
        success = await wb_auth.request_sms_code(phone)
        
        if not success:
            await wb_auth.close_session()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await processing_msg.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ SMS</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(phone_number=phone)
        await state.set_state(AuthStates.waiting_for_sms_code)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é", callback_data="cancel_phone_auth")]
        ])
        
        await processing_msg.edit_text(
            f"‚úÖ <b>SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>\n\n"
            f"–ù–∞ –Ω–æ–º–µ—Ä {phone} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω SMS –∫–æ–¥.\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ (–±—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º):\n\n"
            f"‚ö†Ô∏è <i>–ë—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –¥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã</i>",
            parse_mode="HTML",
            reply_markup=cancel_keyboard
        )
            
    except WBWebAuthError as e:
        await cleanup_wb_auth_service()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await processing_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        logger.error(f"WB Web Auth error for user {message.from_user.id}: {e}")
        await state.clear()
        
    except Exception as e:
        await cleanup_wb_auth_service()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await processing_msg.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        logger.error(f"Error requesting SMS for user {message.from_user.id}: {e}")
        await state.clear()


@auth_router.message(StateFilter(AuthStates.waiting_for_sms_code))
async def process_sms_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ SMS –∫–æ–¥–∞"""
    sms_code = message.text.strip()
    user_id = message.from_user.id
    
    logger.info(f"üîê User {user_id} entered SMS code: {sms_code}")
    
    if not sms_code.isdigit() or len(sms_code) != 6:
        logger.warning(f"‚ùå User {user_id} entered invalid SMS code format: {sms_code}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ SMS")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        phone_number = data.get('phone_number')
        
        if not phone_number:
            await processing_msg.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SMS –∫–æ–¥ –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞)
        wb_auth = get_wb_auth_service(user_id=user_id)
        success, auth_data = await wb_auth.verify_sms_code(sms_code)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await wb_auth.close_session()
        
        if not success or not auth_data:
            await processing_msg.edit_text(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_data['phone_number'] = phone_number
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repo.get_or_create_user(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            await user_repo.save_phone_auth(user, auth_data)
        
        logger.info(f"‚úÖ User {message.from_user.id} successfully authenticated with INN: {auth_data['inn']}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_text = f"""
‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>

üì± –ù–æ–º–µ—Ä: {phone_number}
üè¢ –ò–ù–ù: {auth_data['inn']}
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {auth_data['seller_name']}

<b>üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤!</b>

<b>üöÄ –ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
        ])
        
        await processing_msg.edit_text(success_text, reply_markup=keyboard, parse_mode="HTML")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
        try:
            from app.bot.handlers.cabinet import callback_auto_booking
            class FakeCallback:
                def __init__(self, message, from_user):
                    self.message = message
                    self.from_user = from_user
                    self.data = "auto_booking"
            fake_cb = FakeCallback(processing_msg, message.from_user)
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π state –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            class FakeState:
                def __init__(self):
                    pass
            fake_state = FakeState()
            await callback_auto_booking(fake_cb, fake_state)
        except Exception as e:
            logger.warning(f"Could not auto-open auto booking screen after auth: {e}")
        
        logger.info(f"Phone auth successful for user {message.from_user.id} with INN: {auth_data['inn']}")
            
    except WBWebAuthError as e:
        await cleanup_wb_auth_service()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await processing_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        logger.error(f"WB Web Auth error processing SMS for user {message.from_user.id}: {e}")
        await state.clear()
        
    except Exception as e:
        await cleanup_wb_auth_service()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await processing_msg.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        logger.error(f"Error processing SMS code for user {message.from_user.id}: {e}")
        await state.clear()


@auth_router.callback_query(F.data == "cancel_phone_auth")
async def cancel_phone_auth(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        await cleanup_wb_auth_service()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await callback.message.edit_text(
            "‚ùå <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
            parse_mode="HTML"
        )
        
        logger.info(f"Phone auth cancelled by user {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error cancelling phone auth for user {callback.from_user.id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)


@auth_router.callback_query(F.data == "phone_reauth")
async def phone_reauth(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = callback.from_user.id
    
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            user = await user_repo.get_by_telegram_id(user_id)
            
            if user:
                await user_repo.clear_phone_auth(user)
                await session.commit()
                logger.info(f"Cleared old session for user {user_id}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        await cleanup_wb_auth_service()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await start_phone_auth(callback, state)
        
    except Exception as e:
        logger.error(f"Error during reauth for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
