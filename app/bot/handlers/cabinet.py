"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º –ø—Ä–æ–¥–∞–≤—Ü–∞"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from loguru import logger

from app.services.wildberries_api import wb_api, WildberriesAPIError, WildberriesAuthError
from app.database.database import AsyncSessionLocal
from app.database.repositories.user_repo import UserRepository
from app.services.wb_web_auth import get_wb_auth_service, WBWebAuthError


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞
cabinet_router = Router()


@cabinet_router.message(Command("cabinet_info"))
@cabinet_router.callback_query(F.data == "cabinet_info")
async def cmd_cabinet_info(event: Message | CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ"""
    user_id = event.from_user.id if isinstance(event, Message) else event.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if isinstance(event, Message):
        processing_msg = await event.answer("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ...")
    else:
        processing_msg = event.message
        await processing_msg.edit_text("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ...")
    
    try:
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repo.get_by_telegram_id(user_id)
            
            if not user or not user.has_wb_token():
                text = """
üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–±–∏–Ω–µ—Ç–µ</b>

‚ùå API-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω

–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API-—Ç–æ–∫–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /add_token
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="add_token")]
                ])
                
                await processing_msg.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            wb_token = await user_repo.get_wb_token(user)
            
            if not wb_token:
                await processing_msg.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∑–∞–Ω–æ–≤–æ.",
                    parse_mode="HTML"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ API
            async with wb_api:
                cabinet_info = await wb_api.get_cabinet_info(wb_token)
                seller_info = cabinet_info.get('seller_info', {})
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                token_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if cabinet_info.get('api_token_valid') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                test_status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if cabinet_info.get('token_test_passed') else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –∏–∑ seller-info API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                seller_name = seller_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                seller_id = seller_info.get('sid', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                trade_mark = seller_info.get('tradeMark', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
                token_created = user.wb_token_created_at.strftime('%d.%m.%Y %H:%M') if user.wb_token_created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                token_last_used = user.wb_token_last_used_at.strftime('%d.%m.%Y %H:%M') if user.wb_token_last_used_at else "–ù–∏–∫–æ–≥–¥–∞"
                
                text = f"""
üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ</b>

üë§ <b>–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {seller_name}
‚Ä¢ ID –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller_id}
‚Ä¢ –¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞: {trade_mark}

üîë <b>API-—Ç–æ–∫–µ–Ω:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {token_status}
‚Ä¢ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {test_status}
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω: {token_created}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {token_last_used}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –ú–æ–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
‚Ä¢ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω - —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –ú–æ–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏", callback_data="my_monitorings")],
                    [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="auto_booking")],
                    [InlineKeyboardButton(text="üë• –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="view_accounts")],
                    [InlineKeyboardButton(text="üè™ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤", callback_data="update_warehouses")],
                    [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="remove_token")],
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω", callback_data="add_token")]
                ])
                
                await processing_msg.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    
    except WildberriesAPIError as e:
        error_text = str(e)
        if "–ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" in error_text.lower():
            await processing_msg.edit_text(
                f"‚è≥ <b>–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API</b>\n\n"
                f"{error_text}\n\n"
                "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - Wildberries –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
                parse_mode="HTML"
            )
        else:
            await processing_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ API</b>\n\n{error_text}",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"Error in cabinet_info for user {user_id}: {e}")
        await processing_msg.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )


@cabinet_router.callback_query(F.data == "delete_account")
async def callback_delete_account(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        from app.config.settings import is_admin
        if not is_admin(user_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...")
        
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = await user_repo.get_all_users()
            
            if not all_users:
                text = """
üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</b>

‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="view_accounts")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            text = "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            text += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ–ª–Ω–æ–º—É —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
            
            keyboard_buttons = []
            
            for i, user in enumerate(all_users[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                display_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                
                text += f"{i}. <b>{display_name}</b>\n"
                text += f"   ID: {user.telegram_id}\n"
                text += f"   Username: {username}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üóë –£–¥–∞–ª–∏—Ç—å {display_name}",
                        callback_data=f"confirm_delete_account:{user.telegram_id}"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="view_accounts")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"Error showing delete account list for admin {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="view_accounts")]
            ]),
            parse_mode="HTML"
        )


@cabinet_router.callback_query(F.data.startswith("confirm_delete_account:"))
async def callback_confirm_delete_account(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        from app.config.settings import is_admin
        if not is_admin(user_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        target_user_id = int(callback.data.split(":")[1])
        
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            target_user = await user_repo.get_by_telegram_id(target_user_id)
            
            if not target_user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = f"@{target_user.username}" if target_user.username else "–ë–µ–∑ username"
            display_name = target_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            
            text = f"""
üóë <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {display_name}
üÜî <b>ID:</b> {target_user.telegram_id}
üì± <b>Username:</b> {username}

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>
–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫:
‚Ä¢ –ü–æ–ª–Ω–æ–º—É —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏—é API —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

‚ùå <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                        callback_data=f"execute_delete_account:{target_user_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data="delete_account"
                    )
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="view_accounts")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"Error confirming account deletion for admin {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


@cabinet_router.callback_query(F.data.startswith("execute_delete_account:"))
async def callback_execute_delete_account(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        from app.config.settings import is_admin
        if not is_admin(user_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        target_user_id = int(callback.data.split(":")[1])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text("üîÑ –£–¥–∞–ª—è—é –∞–∫–∫–∞—É–Ω—Ç...")
        
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            target_user = await user_repo.get_by_telegram_id(target_user_id)
            
            if not target_user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = f"@{target_user.username}" if target_user.username else "–ë–µ–∑ username"
            display_name = target_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            
            try:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                success = await user_repo.delete_user(target_user_id)
                
                if success:
                    text = f"""
‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>

üë§ <b>–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {display_name}
üÜî <b>ID:</b> {target_user_id}
üì± <b>Username:</b> {username}

üóë <b>–£–¥–∞–ª–µ–Ω—ã:</b>
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –í—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
‚Ä¢ API —Ç–æ–∫–µ–Ω—ã
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    """
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üë• –ö —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="view_accounts")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –í –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                    ])
                    
                    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                    logger.info(f"Admin {user_id} deleted account {target_user_id} ({display_name})")
                    
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)
                    
            except Exception as e:
                logger.error(f"Error deleting account {target_user_id} by admin {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error executing account deletion for admin {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)


@cabinet_router.callback_query(F.data == "remove_token")
async def callback_remove_token(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å API-—Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    try:
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repo.get_by_telegram_id(user_id)
            
            if not user or not user.has_wb_token():
                text = """
üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞</b>

‚ùå API-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω

–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="add_token")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cabinet_info")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            text = """
üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ API-—Ç–æ–∫–µ–Ω–∞</b>

‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω?</b>

–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:
‚Ä¢ –í—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫–∞–±–∏–Ω–µ—Ç–∞
‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_remove_token")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cabinet_info")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    
    except Exception as e:
        logger.error(f"Error in remove_token for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )


@cabinet_router.callback_query(F.data == "confirm_remove_token")
async def callback_confirm_remove_token(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ API-—Ç–æ–∫–µ–Ω–∞"""
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await callback.message.edit_text("üîÑ –£–¥–∞–ª—è—é —Ç–æ–∫–µ–Ω...")
    
    try:
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repo.get_by_telegram_id(user_id)
            
            if not user or not user.has_wb_token():
                await callback.message.edit_text(
                    "‚ùå <b>–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                    parse_mode="HTML"
                )
                return
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
            await user_repo.remove_wb_token(user)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = """
‚úÖ <b>–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>

üîí API-—Ç–æ–∫–µ–Ω –±—ã–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω", callback_data="add_token")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            
            logger.info(f"Token removed for user: {user_id}")
    
    except Exception as e:
        logger.error(f"Error confirming token removal for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )


@cabinet_router.callback_query(F.data == "update_warehouses")
async def update_warehouses(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ API WB"""
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.message.edit_text("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤...")
    
    try:
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            user = await user_repo.get_by_telegram_id(user_id)
            
            if not user or not user.has_wb_token():
                await callback.message.edit_text(
                    "‚ùå <b>API-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ API-—Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="add_token")],
                        [InlineKeyboardButton(text="üìä –ö–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                    ]),
                    parse_mode="HTML"
                )
                return
            
            wb_token = await user_repo.get_wb_token(user)
            if not wb_token:
                await callback.message.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å API-—Ç–æ–∫–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìä –ö–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                    ]),
                    parse_mode="HTML"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã –∏–∑ API
            async with wb_api:
                api_warehouses = await wb_api.get_warehouses(wb_token)
            
            if not api_warehouses:
                await callback.message.edit_text(
                    "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã</b>\n\n"
                    "API WB –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –¢–æ–∫–µ–Ω –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏\n"
                    "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API\n"
                    "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="update_warehouses")],
                        [InlineKeyboardButton(text="üìä –ö–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                    ]),
                    parse_mode="HTML"
                )
                return
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∫–ª–∞–¥–æ–≤
            from app.database.repositories.warehouse_repo import WarehouseRepository
            
            warehouse_repo = WarehouseRepository(session)
            stats = await warehouse_repo.sync_warehouses_from_api(api_warehouses)
            
            await callback.message.edit_text(
                f"‚úÖ <b>–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {stats['total']}\n"
                f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {stats['created']}\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –ö–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                ]),
                parse_mode="HTML"
            )
            
            logger.info(f"Warehouses updated for user {user_id}: {stats}")
    
    except WildberriesAPIError as e:
        error_text = str(e)
        if "401" in error_text or "Unauthorized" in error_text:
            error_msg = "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\nAPI-—Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è."
        elif "403" in error_text or "Forbidden" in error_text:
            error_msg = "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\nAPI-—Ç–æ–∫–µ–Ω –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤."
        else:
            error_msg = f"‚ùå <b>–û—à–∏–±–∫–∞ API Wildberries</b>\n\n{error_text}"
        
        await callback.message.edit_text(
            error_msg,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="update_warehouses")],
                [InlineKeyboardButton(text="üìä –ö–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
            ]),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error updating warehouses for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="update_warehouses")],
                [InlineKeyboardButton(text="üìä –ö–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
            ]),
            parse_mode="HTML"
        )


@cabinet_router.callback_query(F.data == "auto_booking")
async def callback_auto_booking(callback: CallbackQuery, state: FSMContext):
    """–≠–∫—Ä–∞–Ω –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'"""
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤...")
    
    try:
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            user = await user_repo.get_by_telegram_id(user_id)
            
            if not user or not user.has_phone_auth():
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
                text = (
                    "ü§ñ <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤</b>\n\n"
                    "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="phone_auth")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session_data = await user_repo.get_phone_auth_session(user)
            if not session_data:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
                text = (
                    "‚ùå <b>–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                    "–ù—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ."
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="phone_reauth")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
            wb_auth = get_wb_auth_service(user_id=user_id)
            try:
                order_numbers = await wb_auth.get_unplanned_order_numbers(session_data)
                
                if not order_numbers:
                    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
                    text = (
                        "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
                        "‚úÖ –ó–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                        "–í—Å–µ –∑–∞–∫–∞–∑—ã —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
                    )
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="auto_booking")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                    ])
                    
                else:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    orders_text = "\n".join([f"‚Ä¢ {order}" for order in order_numbers[:5]])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    if len(order_numbers) > 5:
                        orders_text += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(order_numbers) - 5} –∑–∞–∫–∞–∑–æ–≤"
                    
                    text = (
                        f"üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>\n\n"
                        f"üìä <b>–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:</b> {len(order_numbers)}\n\n"
                        f"<b>–ù–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤:</b>\n{orders_text}\n\n"
                        f"üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤</i>"
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–º–∞–∫—Å–∏–º—É–º 5)
                    keyboard_buttons = []
                    for i, order in enumerate(order_numbers[:5]):
                        keyboard_buttons.append([
                            InlineKeyboardButton(
                                text=f"üéØ –ó–∞–∫–∞–∑ {order}", 
                                callback_data=f"monitor_order:{order}"
                            )
                        ])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                    keyboard_buttons.extend([
                        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="auto_booking")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                    ])
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                
            except WBWebAuthError as e:
                if str(e) == 'AUTH_REQUIRED':
                    # –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞
                    text = (
                        "‚ùå <b>–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞</b>\n\n"
                        "–ù—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ."
                    )
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="phone_reauth")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                    ])
                    
                    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                else:
                    raise
                    
    except Exception as e:
        logger.error(f"Error in auto_booking for user {user_id}: {e}")
        text = (
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="auto_booking")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@cabinet_router.callback_query(F.data == "phone_reauth")
async def callback_phone_reauth(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    user_id = callback.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(user_id)
        
        if user and user.has_phone_auth():
            await user_repo.remove_phone_auth(user)
            logger.info(f"Removed phone auth for user {user_id} for reauth")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    callback.data = "phone_auth"
    from app.bot.handlers.auth import start_phone_auth
    await start_phone_auth(callback, state)


@cabinet_router.callback_query(F.data.startswith("monitor_order:"))
async def callback_monitor_order(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    user_id = callback.from_user.id
    order_number = callback.data.split(":", 1)[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_order_number=order_number)
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ø—Ä–µ–¥–≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
    from app.bot.handlers.monitoring import start_monitoring_setup
    await start_monitoring_setup(callback, state)


@cabinet_router.callback_query(F.data == "view_accounts")
async def callback_view_accounts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –±–æ—Ç–∞"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        from app.config.settings import is_admin
        is_user_admin = is_admin(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = await user_repo.get_all_users()
            
            if not all_users:
                text = """
üë• <b>–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>

‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                """
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            accounts_text = f"üë• <b>–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ({len(all_users)})</b>\n\n"
            
            for i, user in enumerate(all_users, 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞
                token_status = "‚úÖ" if user.has_wb_token() else "‚ùå"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                display_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                last_activity = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if user.updated_at:
                    from datetime import datetime, timezone
                    now = datetime.now(timezone.utc)
                    diff = now - user.updated_at.replace(tzinfo=timezone.utc)
                    if diff.days > 0:
                        last_activity = f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
                    elif diff.seconds > 3600:
                        last_activity = f"{diff.seconds // 3600} —á. –Ω–∞–∑–∞–¥"
                    else:
                        last_activity = "–ù–µ–¥–∞–≤–Ω–æ"
                
                accounts_text += f"{i}. {token_status} <b>{display_name}</b>\n"
                accounts_text += f"   ID: {user.telegram_id}\n"
                accounts_text += f"   Username: {username}\n"
                accounts_text += f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞—Ö
                from app.database.repositories.slot_monitoring_repo import SlotMonitoringRepository
                slot_repo = SlotMonitoringRepository(session)
                active_monitorings = await slot_repo.get_active_monitorings(user)
                if active_monitorings:
                    accounts_text += f"   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤: {len(active_monitorings)}\n"
                
                accounts_text += "\n"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(accounts_text) > 3000:
                    accounts_text += f"... –∏ –µ—â–µ {len(all_users) - i} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
                    break
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard_buttons = [
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="view_accounts")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            if is_user_admin:
                keyboard_buttons.insert(1, [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(accounts_text, reply_markup=keyboard, parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"Error viewing accounts for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
            ]),
            parse_mode="HTML"
        )
