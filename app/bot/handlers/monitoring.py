"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤"""

from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from app.services.wildberries_api import wb_api, WildberriesAPIError, WildberriesAuthError
from app.services.booking_service import get_booking_service, BookingServiceError
from app.database.database import AsyncSessionLocal
from app.database.repositories.user_repo import UserRepository
from app.database.repositories.slot_monitoring_repo import SlotMonitoringRepository
from app.database.models import MonitoringStatus
from .keyboards import (
    create_coefficient_keyboard, create_box_type_keyboard, create_logistics_shoulder_keyboard,
    create_date_range_keyboard, create_calendar, create_warehouse_keyboard,
    create_edit_monitoring_keyboard, create_edit_coefficient_keyboard,
    create_edit_box_type_keyboard, create_edit_logistics_shoulder_keyboard,
    create_edit_date_range_keyboard, create_edit_quick_period_keyboard,
    create_edit_confirm_keyboard, create_my_monitorings_keyboard,
    create_no_monitorings_keyboard, create_monitoring_success_keyboard,
    create_slot_notification_keyboard, create_warehouse_error_keyboard,
    create_delete_confirmation_keyboard
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitoring_router = Router()


async def handle_calendar_navigation(callback: CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    if callback.data.startswith("cal_prev_") or callback.data.startswith("cal_next_"):
        parts = callback.data.split("_")
        year, month = int(parts[2]), int(parts[3])

        if callback.data.startswith("cal_prev_"):
            month -= 1
            if month == 0:
                month = 12
                year -= 1
        else:
            month += 1
            if month == 13:
                month = 1
                year += 1

        calendar_keyboard = create_calendar(year, month)
        await callback.message.edit_reply_markup(reply_markup=calendar_keyboard)


async def handle_date_selection(callback: CallbackQuery, state: FSMContext, date_type: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    if callback.data.startswith("cal_select_"):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
            parts = callback.data.split("_")
            year = int(parts[2])
            month = int(parts[3])
            day = int(parts[4])

            selected_date = datetime(year, month, day).date()
            today = datetime.now().date()

            if selected_date < today:
                await callback.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É", show_alert=True)
                return

            if date_type == "from":
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
                await state.update_data(date_from=selected_date)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
                calendar_keyboard = create_calendar(year, month)

                await callback.message.edit_text(
                    f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
                    f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
                    reply_markup=calendar_keyboard,
                    parse_mode="HTML"
                )
                await state.set_state(MonitoringStates.selecting_date_to)

            elif date_type == "to":
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
                data = await state.get_data()
                date_from = data.get("date_from")

                if not date_from:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return

                if selected_date <= date_from:
                    await callback.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª—å–Ω–æ–π", show_alert=True)
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
                await state.update_data(date_to=selected_date)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if data.get("editing_monitoring_id"):
                    # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    monitoring_id = data.get("editing_monitoring_id")
                    period_text = f"{date_from.strftime('%d.%m.%Y')} - {selected_date.strftime('%d.%m.%Y')}"

                    await callback.message.edit_text(
                        f"‚úÖ <b>–ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                        f"‚Ä¢ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {period_text}\n"
                        f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(selected_date - date_from).days} –¥–Ω–µ–π\n\n"
                        f"<b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring_id}</b>\n"
                        f"–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(
                                text="üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", callback_data="edit_coefficient")],
                            [InlineKeyboardButton(
                                text="üöö –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ", callback_data="edit_logistics_shoulder")],
                            [InlineKeyboardButton(
                                text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="confirm_edit")],
                            [InlineKeyboardButton(
                                text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="my_monitorings")]
                        ]),
                        parse_mode="HTML"
                    )
                    await state.set_state(MonitoringStates.editing_monitoring)
                else:
                    # –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è - –ø—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ –∫ –¥–∞—Ç–∞–º
                    logistics_shoulder = data.get('logistics_shoulder', 0)
                    date_from_with_shoulder = date_from + timedelta(days=logistics_shoulder)
                    date_to_with_shoulder = selected_date  # –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–µ—á–∞
                    await state.update_data(
                        date_from=date_from_with_shoulder,
                        date_to=date_to_with_shoulder
                    )
                    
                    period_text = f"{date_from.strftime('%d.%m.%Y')} - {selected_date.strftime('%d.%m.%Y')}"
                    await state.update_data(period_text=period_text)

                    text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}
‚úÖ –ü–µ—Ä–∏–æ–¥: {period_text}

<b>–®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–°–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤...
                    """

                    await callback.message.edit_text(text, parse_mode="HTML")

                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
                    class FakeCallback:
                        def __init__(self, callback_obj):
                            self.from_user = callback_obj.from_user
                            self.message = callback_obj.message

                    fake_callback = FakeCallback(callback)
                    await load_warehouses_for_selection(fake_callback, state)

        except Exception as e:
            logger.error(f"Error handling date selection: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã", show_alert=True)


class MonitoringStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    selecting_coefficient = State()
    selecting_box_type = State()
    selecting_logistics_shoulder = State()
    selecting_date_range = State()
    selecting_date_from = State()
    selecting_date_to = State()
    selecting_warehouses = State()
    selecting_acceptance_options = State()
    confirming_monitoring = State()

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    editing_monitoring = State()
    editing_coefficient = State()
    editing_logistics_shoulder = State()
    editing_date_range = State()
    editing_date_from = State()
    editing_date_to = State()
    confirming_edit = State()


@monitoring_router.callback_query(F.data == "start_monitoring")
async def start_monitoring_setup(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤"""
    user_id = callback.from_user.id

    try:
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            user = await user_repo.get_by_telegram_id(user_id)

            if not user or not user.has_wb_token():
                await callback.message.edit_text(
                    "‚ùå <b>API-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API-—Ç–æ–∫–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /add_token",
                    parse_mode="HTML"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
            slot_repo = SlotMonitoringRepository(session)
            active_monitorings = await slot_repo.get_active_monitorings(user)

            if len(active_monitorings) >= 3:  # –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
                await callback.message.edit_text(
                    "‚ö†Ô∏è <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤</b>\n\n"
                    f"–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ {len(active_monitorings)} –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤.\n"
                    "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.",
                    parse_mode="HTML"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑)
            state_data = await state.get_data()
            selected_order = state_data.get('selected_order_number')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            if selected_order:
                order_info = f"üì¶ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑:</b> {selected_order}\n\n"
                step_info = "<b>–®–∞–≥ 1/4: –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏</b>"
            else:
                order_info = ""
                step_info = "<b>–®–∞–≥ 1/4: –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏</b>"
            
            text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

{order_info}{step_info}

–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–µ–º–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ WB:
‚Ä¢ <b>0</b> - –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞ üü¢
‚Ä¢ <b>1-5</b> - –ù–∏–∑–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã üü°
‚Ä¢ <b>6-10</b> - –°—Ä–µ–¥–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã üü†
‚Ä¢ <b>11-20</b> - –í—ã—Å–æ–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã üî¥

<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–æ—Ç 0 –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ):</b>
            """

            keyboard = create_coefficient_keyboard()

            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await state.set_state(MonitoringStates.selecting_coefficient)

    except Exception as e:
        logger.error(
            f"Error starting monitoring setup for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(StateFilter(MonitoringStates.selecting_coefficient))
async def select_coefficient(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"""
    coefficient_data = {
        "coeff_0": (0, 0, "üü¢ –¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ (0)"),
        "coeff_1": (0, 1, "üü° –î–æ x1 (0-1)"),
        "coeff_2": (0, 2, "üü° –î–æ x2 (0-2)"),
        "coeff_3": (0, 3, "üü° –î–æ x3 (0-3)"),
        "coeff_4": (0, 4, "üü° –î–æ x4 (0-4)"),
        "coeff_5": (0, 5, "üü° –î–æ x5 (0-5)"),
        "coeff_6": (0, 6, "üü† –î–æ x6 (0-6)"),
        "coeff_7": (0, 7, "üü† –î–æ x7 (0-7)"),
        "coeff_8": (0, 8, "üü† –î–æ x8 (0-8)"),
        "coeff_9": (0, 9, "üü† –î–æ x9 (0-9)"),
        "coeff_10": (0, 10, "üü† –î–æ x10 (0-10)"),
        "coeff_20": (0, 20, "üî¥ –î–æ x20 (0-20)"),
        "coeff_any": (0, 100, "üåü –õ—é–±–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç")
    }

    if callback.data in coefficient_data:
        coeff_min, coeff_max, coeff_text = coefficient_data[callback.data]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        await state.update_data(
            coefficient_min=coeff_min,
            coefficient_max=coeff_max,
            coefficient_text=coeff_text
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–ø–∞–∫–æ–≤–∫–∏
        text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {coeff_text}

<b>–®–∞–≥ 2/5: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏</b>

–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–æ—Å–æ–± –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥ WB:

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏:</b>
        """

        keyboard = create_box_type_keyboard()

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(MonitoringStates.selecting_box_type)


@monitoring_router.callback_query(StateFilter(MonitoringStates.selecting_box_type))
async def select_box_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–ø–∞–∫–æ–≤–∫–∏"""
    if callback.data == "back_to_coefficient":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
        await start_monitoring_setup(callback, state)
        return

    box_type_data = {
        "box_type_2": (2, "üì¶ –ö–æ—Ä–æ–±–∞"),
        "box_type_5": (5, "üõí –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã"),
        "box_type_6": (6, "üöõ –°—É–ø–µ—Ä—Å–µ–π—Ñ"),
        "box_type_any": (None, "üåü –õ—é–±–æ–π —Ç–∏–ø")
    }

    if callback.data in box_type_data:
        box_type_id, box_type_text = box_type_data[callback.data]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏
        await state.update_data(
            box_type_id=box_type_id,
            box_type_text=box_type_text
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        data = await state.get_data()

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–µ—á–∞
        text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}
‚úÖ –¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏: {box_type_text}

<b>–®–∞–≥ 3/5: –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ</b>

–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ - —ç—Ç–æ –¥–Ω–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥ WB.
–ï—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 10.09.2025 —Å –ø–ª–µ—á–æ–º 2 –¥–Ω—è, 
—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–ª–æ—Ç—ã —Å 12.09.2025.

<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É:</b>
        """

        keyboard = create_logistics_shoulder_keyboard()

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(MonitoringStates.selecting_logistics_shoulder)


@monitoring_router.callback_query(StateFilter(MonitoringStates.selecting_logistics_shoulder))
async def select_logistics_shoulder(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–µ—á–∞"""
    if callback.data == "back_to_box_type":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–ø–∞–∫–æ–≤–∫–∏
        data = await state.get_data()
        text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}

<b>–®–∞–≥ 2/5: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏</b>

–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–æ—Å–æ–± –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥ WB:

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏:</b>
        """

        keyboard = create_box_type_keyboard()

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(MonitoringStates.selecting_box_type)
        return

    if callback.data.startswith("logistics_"):
        logistics_days = int(callback.data.split("_")[1])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ
        await state.update_data(logistics_shoulder=logistics_days)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        data = await state.get_data()

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logistics_text = f"{logistics_days} –¥–Ω–µ–π" if logistics_days > 0 else "–≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"

        text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}
‚úÖ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ: {logistics_text}

<b>–®–∞–≥ 3/5: –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∏—Å–∫–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:
        """

        keyboard = create_date_range_keyboard()

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(MonitoringStates.selecting_date_range)


@monitoring_router.callback_query(MonitoringStates.selecting_date_range)
async def select_date_range(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
    if callback.data == "back_to_logistics":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–µ—á–∞
        data = await state.get_data()
        text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}

<b>–®–∞–≥ 2/5: –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ</b>

–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ - —ç—Ç–æ –¥–Ω–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥ WB.
–ï—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 10.09.2025 —Å –ø–ª–µ—á–æ–º 2 –¥–Ω—è, 
—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–ª–æ—Ç—ã —Å 12.09.2025.

<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É:</b>
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üöö 0 –¥–Ω–µ–π (–≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ)", callback_data="logistics_0")],
            [InlineKeyboardButton(
                text="üöö 1 –¥–µ–Ω—å", callback_data="logistics_1")],
            [InlineKeyboardButton(
                text="üöö 2 –¥–Ω—è", callback_data="logistics_2")],
            [InlineKeyboardButton(
                text="üöö 3 –¥–Ω—è", callback_data="logistics_3")],
            [InlineKeyboardButton(
                text="üöö 4 –¥–Ω—è", callback_data="logistics_4")],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_coefficient")],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_monitoring")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(MonitoringStates.selecting_logistics_shoulder)
        return

    if callback.data == "back_to_date_selection":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
        data = await state.get_data()
        text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}

<b>–®–∞–≥ 2/4: –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∏—Å–∫–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π",
                                  callback_data="date_range_week")],
            [InlineKeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π",
                                  callback_data="date_range_2weeks")],
            [InlineKeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü",
                                  callback_data="date_range_month")],
            [InlineKeyboardButton(text="üìù –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –¥–∞—Ç—ã",
                                  callback_data="date_range_custom")],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_coefficient")],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_monitoring")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        return

    from datetime import datetime, timedelta

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    now = datetime.now()
    date_ranges = {
        "date_range_week": (now, now + timedelta(days=7), "7 –¥–Ω–µ–π"),
        "date_range_2weeks": (now, now + timedelta(days=14), "14 –¥–Ω–µ–π"),
        "date_range_month": (now, now + timedelta(days=30), "–º–µ—Å—è—Ü"),
    }

    if callback.data == "date_range_custom":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
        now = datetime.now()

        data = await state.get_data()
        text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}

<b>–®–∞–≥ 2/4: –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:
        """

        calendar_kb = create_calendar(now.year, now.month)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        calendar_kb.inline_keyboard.extend([
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="back_to_date_selection")],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_monitoring")]
        ])

        await state.set_state(MonitoringStates.selecting_date_from)
        await callback.message.edit_text(text, reply_markup=calendar_kb, parse_mode="HTML")
        return

    if callback.data in date_ranges:
        date_from, date_to, period_text = date_ranges[callback.data]

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ
        data = await state.get_data()
        logistics_shoulder = data.get('logistics_shoulder', 0)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ —Ç–æ–ª—å–∫–æ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ
        date_from_with_shoulder = date_from + timedelta(days=logistics_shoulder)
        date_to_with_shoulder = date_to  # –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å —É—á–µ—Ç–æ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–µ—á–∞
        await state.update_data(
            date_from=date_from_with_shoulder,
            date_to=date_to_with_shoulder,
            period_text=period_text
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        data = await state.get_data()

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–∫–ª–∞–¥–æ–≤
        logistics_text = f"{logistics_shoulder} –¥–Ω–µ–π" if logistics_shoulder > 0 else "–≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"

        text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}
‚úÖ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ: {logistics_text}
‚úÖ –ü–µ—Ä–∏–æ–¥: {period_text}

<b>–®–∞–≥ 4/5: –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–°–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤...
        """

        await callback.message.edit_text(text, parse_mode="HTML")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ API
        await load_warehouses_for_selection(callback, state)


@monitoring_router.callback_query(MonitoringStates.selecting_date_from)
async def handle_date_from_calendar(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
    await callback.answer()

    if callback.data == "back_to_date_selection":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
        data = await state.get_data()
        text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}

<b>–®–∞–≥ 2/4: –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∏—Å–∫–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π",
                                  callback_data="date_range_week")],
            [InlineKeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π",
                                  callback_data="date_range_2weeks")],
            [InlineKeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü",
                                  callback_data="date_range_month")],
            [InlineKeyboardButton(text="üìù –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –¥–∞—Ç—ã",
                                  callback_data="date_range_custom")],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_coefficient")],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_monitoring")]
        ])

        await state.set_state(MonitoringStates.selecting_date_range)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await handle_calendar_navigation(callback, state)
    await handle_date_selection(callback, state, "from")


@monitoring_router.callback_query(MonitoringStates.selecting_date_to)
async def handle_date_to_calendar(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    await callback.answer()

    data = await state.get_data()
    date_from = data.get('date_from')

    if callback.data == "back_to_date_from":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
        now = datetime.now()
        text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}

<b>–®–∞–≥ 2/4: –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:
        """

        calendar_kb = create_calendar(now.year, now.month)
        calendar_kb.inline_keyboard.extend([
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="back_to_date_selection")],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_monitoring")]
        ])

        await state.set_state(MonitoringStates.selecting_date_from)
        await callback.message.edit_text(text, reply_markup=calendar_kb, parse_mode="HTML")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await handle_calendar_navigation(callback, state)
    await handle_date_selection(callback, state, "to")


async def update_warehouses_page(callback: CallbackQuery, state: FSMContext, page: int):
    """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∫–ª–∞–¥–æ–≤ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
    try:
        data = await state.get_data()
        available_warehouses = data.get('available_warehouses', [])
        selected_warehouses = data.get('selected_warehouses', [])

        if not available_warehouses:
            await callback.answer("‚ùå –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await state.update_data(current_page=page)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 10 —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        warehouses_per_page = 10
        start_idx = page * warehouses_per_page
        end_idx = start_idx + warehouses_per_page
        current_warehouses = available_warehouses[start_idx:end_idx]

        total_pages = (len(available_warehouses) -
                       1) // warehouses_per_page + 1

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–∫–ª–∞–¥–∞–º–∏
        keyboard = create_warehouse_keyboard(
            available_warehouses, selected_warehouses, page)

        data = await state.get_data()
        updated_text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}
‚úÖ –ü–µ—Ä–∏–æ–¥: {data.get('period_text', '7 –¥–Ω–µ–π')}

<b>–®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã WB ({len(selected_warehouses)}/5)</b>

üìä <b>–í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤:</b> {len(available_warehouses)}
üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {page + 1} –∏–∑ {total_pages}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å.
–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏, –ø–µ—Ä–∏–æ–¥).
        """

        await callback.message.edit_text(updated_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error updating warehouses page: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)


async def load_warehouses_for_selection(callback: CallbackQuery, state: FSMContext, page: int = 0):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–ª–∞–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    user_id = callback.from_user.id

    try:
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            user = await user_repo.get_by_telegram_id(user_id)
            wb_token = await user_repo.get_wb_token(user)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await state.get_data()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            from app.services.warehouse_service import WarehouseService
            warehouse_service = WarehouseService(session)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
            is_cached = await warehouse_service.is_warehouse_cached()

            if is_cached:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
                warehouses = await warehouse_service.get_cached_warehouses()
                logger.info(
                    f"Using {len(warehouses)} cached warehouses for user {user_id}")
            else:
                # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –∏–∑ API –∏ –∫—ç—à–∏—Ä—É–µ–º
                warehouses = await warehouse_service.get_warehouses_for_monitoring(wb_token, force_refresh=True)
                logger.info(
                    f"Fetched and cached {len(warehouses)} warehouses for user {user_id}")

            if not warehouses:
                await callback.message.edit_text(
                    f"‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ WB</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ API —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
                    reply_markup=create_warehouse_error_keyboard(),
                    parse_mode="HTML"
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await state.update_data(
                available_warehouses=warehouses,
                current_page=page,
                warehouses_from_cache=is_cached
            )

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 10 —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            warehouses_per_page = 10
            start_idx = page * warehouses_per_page
            end_idx = start_idx + warehouses_per_page
            current_warehouses = warehouses[start_idx:end_idx]

            total_pages = (len(warehouses) - 1) // warehouses_per_page + 1

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
            data = await state.get_data()
            selected_warehouses = data.get('selected_warehouses', [])

            keyboard = create_warehouse_keyboard(
                warehouses, selected_warehouses, page)

            data = await state.get_data()
            is_cached = data.get('warehouses_from_cache', False)

            # –¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            cache_info = "üì¶ (–∏–∑ –∫—ç—à–∞)" if is_cached else "üîÑ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ API)"
            updated_text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}
‚úÖ –ü–µ—Ä–∏–æ–¥: {data.get('period_text', '7 –¥–Ω–µ–π')}

<b>–®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã WB ({len(selected_warehouses)}/5)</b>

üìä <b>–í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤:</b> {len(warehouses)} {cache_info}
üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {page + 1} –∏–∑ {total_pages}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å.
–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏, –ø–µ—Ä–∏–æ–¥).
            """

            await callback.message.edit_text(updated_text, reply_markup=keyboard, parse_mode="HTML")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã (–Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º)
            if page == 0:  # –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                await state.update_data(selected_warehouses=[])

            await state.set_state(MonitoringStates.selecting_warehouses)

    except Exception as e:
        logger.error(f"Error loading warehouses for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ WB</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ API-—Ç–æ–∫–µ–Ω –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API WB\n"
            "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞.",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(StateFilter(MonitoringStates.selecting_warehouses))
async def select_warehouses(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤"""
    data = await state.get_data()
    selected_warehouses = data.get('selected_warehouses', [])
    available_warehouses = data.get('available_warehouses', [])
    current_page = data.get('current_page', 0)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if callback.data.startswith("warehouse_page_"):
        page = int(callback.data.split("_")[-1])
        await update_warehouses_page(callback, state, page)
        return

    if callback.data.startswith("select_page_warehouses_"):
        page = int(callback.data.split("_")[-1])
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        warehouses_per_page = 10
        start_idx = page * warehouses_per_page
        end_idx = start_idx + warehouses_per_page
        current_warehouses = available_warehouses[start_idx:end_idx]

        for warehouse in current_warehouses:
            warehouse_id = warehouse.get('ID') or warehouse.get('id')
            if warehouse_id and warehouse_id not in selected_warehouses and len(selected_warehouses) < 5:
                selected_warehouses.append(warehouse_id)

        await state.update_data(selected_warehouses=selected_warehouses)
        await update_warehouses_page(callback, state, page)
        return

    if callback.data == "current_page":
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await callback.answer()
        return

    if callback.data == "back_to_coefficient":
        await start_monitoring_setup(callback, state)
        return

    if callback.data == "select_all_warehouses":
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã (–º–∞–∫—Å–∏–º—É–º 5)
        all_warehouse_ids = []
        for w in available_warehouses[:5]:
            wh_id = w.get('ID') or w.get('id')
            if wh_id is not None:
                all_warehouse_ids.append(wh_id)
        await state.update_data(selected_warehouses=all_warehouse_ids)
        selected_warehouses = all_warehouse_ids

    elif callback.data.startswith("warehouse_"):
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞
        warehouse_id_str = callback.data.replace("warehouse_", "")
        try:
            warehouse_id = int(warehouse_id_str)
        except ValueError:
            logger.error(f"Invalid warehouse_id: {warehouse_id_str}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å–∫–ª–∞–¥–∞", show_alert=True)
            return

        if warehouse_id in selected_warehouses:
            selected_warehouses.remove(warehouse_id)
        else:
            if len(selected_warehouses) < 5:
                selected_warehouses.append(warehouse_id)

        await state.update_data(selected_warehouses=selected_warehouses)

    elif callback.data == "continue_to_options":
        if not selected_warehouses:
            await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∫–ª–∞–¥", show_alert=True)
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await start_final_monitoring(callback, state)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if callback.data.startswith("warehouse_"):
        await update_warehouses_page(callback, state, current_page)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏
        await update_warehouse_keyboard(callback, state, selected_warehouses, available_warehouses)


async def update_warehouse_keyboard(callback: CallbackQuery, state: FSMContext, selected_warehouses: list, available_warehouses: list):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤"""
    keyboard = create_warehouse_keyboard(
        available_warehouses, selected_warehouses, 0)

    data = await state.get_data()
    updated_text = f"""
üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤</b>

‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}
‚úÖ –ü–µ—Ä–∏–æ–¥: {data.get('period_text', '7 –¥–Ω–µ–π')}

<b>–®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã WB ({len(selected_warehouses)}/5)</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å.
–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.
    """

    await callback.message.edit_text(updated_text, reply_markup=keyboard, parse_mode="HTML")


async def start_final_monitoring(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    data = await state.get_data()
    user_id = callback.from_user.id

    try:
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            user = await user_repo.get_by_telegram_id(user_id)

            slot_repo = SlotMonitoringRepository(session)

            # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            monitoring = await slot_repo.create_monitoring(
                user=user,
                coefficient_min=data.get('coefficient_min'),
                coefficient_max=data.get('coefficient_max'),
                warehouse_ids=data.get('selected_warehouses'),
                logistics_shoulder=data.get('logistics_shoulder', 0),
                box_type_id=data.get('box_type_id'),
                acceptance_options={
                    'period': data.get('period_text', '7 –¥–Ω–µ–π'),
                    'notification_type': 'instant'
                },
                date_from=data.get('date_from', datetime.now()),
                date_to=data.get('date_to', datetime.now() + timedelta(days=7)),
                order_number=data.get('selected_order_number')
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            warehouse_names = []
            for warehouse in data.get('available_warehouses', []):
                warehouse_id = warehouse.get('ID') or warehouse.get('id')
                if warehouse_id in data.get('selected_warehouses', []):
                    warehouse_name = warehouse.get(
                        'name', f"–°–∫–ª–∞–¥ {warehouse_id}")
                    warehouse_names.append(
                        f"{warehouse_name} (ID: {warehouse_id})")

            logistics_text = f"{data.get('logistics_shoulder', 0)} –¥–Ω–µ–π" if data.get(
                'logistics_shoulder', 0) > 0 else "–≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"
            box_type_text = data.get('box_type_text', 'üåü –õ—é–±–æ–π —Ç–∏–ø')

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
            order_info = ""
            if data.get('selected_order_number'):
                order_info = f"‚Ä¢ –ó–∞–∫–∞–∑: {data.get('selected_order_number')}\n"
            
            success_text = f"""
‚úÖ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!</b>

<b>üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>
‚Ä¢ ID: #{monitoring.id}
{order_info}‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {data.get('coefficient_text')}
‚Ä¢ –¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏: {box_type_text}
‚Ä¢ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ: {logistics_text}
‚Ä¢ –°–∫–ª–∞–¥–æ–≤: {len(data.get('selected_warehouses', []))}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: {data.get('period_text', '7 –¥–Ω–µ–π')}

<b>üè™ –°–∫–ª–∞–¥—ã:</b>
{chr(10).join([f"‚Ä¢ {name}" for name in warehouse_names[:3]])}
{f"‚Ä¢ ... –∏ –µ—â—ë {len(warehouse_names) - 3}" if len(warehouse_names) > 3 else ""}

<b>üéØ –°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
<b>‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> –∫–∞–∂–¥—ã–µ 12 —Å–µ–∫—É–Ω–¥

–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö.
            """

            keyboard = create_monitoring_success_keyboard()

            await callback.message.edit_text(success_text, reply_markup=keyboard, parse_mode="HTML")
            await state.clear()

            logger.info(
                f"Started monitoring {monitoring.id} for user {user.telegram_id}")

    except Exception as e:
        logger.error(
            f"Error starting final monitoring for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        await state.clear()


@monitoring_router.callback_query(F.data == "cancel_monitoring")
async def cancel_monitoring(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cabinet_info –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞–±–∏–Ω–µ—Ç.",
        parse_mode="HTML"
    )


@monitoring_router.callback_query(F.data == "my_monitorings")
async def show_my_monitorings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id

    try:
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            user = await user_repo.get_by_telegram_id(user_id)

            slot_repo = SlotMonitoringRepository(session)
            monitorings = await slot_repo.get_active_monitorings(user)

            if not monitorings:
                keyboard = create_no_monitorings_keyboard()

                await callback.message.edit_text(
                    "üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏</b>\n\n"
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ.",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                return

            text = "üìä <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏</b>\n\n"

            for monitoring in monitorings:
                status_emoji = "üü¢" if monitoring.status == "active" else "üü°"
                last_check = monitoring.last_check_at.strftime(
                    '%H:%M') if monitoring.last_check_at else "–ù–∏–∫–æ–≥–¥–∞"

                logistics_text = f"{monitoring.logistics_shoulder} –¥–Ω–µ–π" if monitoring.logistics_shoulder > 0 else "–≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏
                box_type_text = "üåü –õ—é–±–æ–π —Ç–∏–ø"
                if monitoring.box_type_id == 2:
                    box_type_text = "üì¶ –ö–æ—Ä–æ–±–∞"
                elif monitoring.box_type_id == 5:
                    box_type_text = "üõí –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã"
                elif monitoring.box_type_id == 6:
                    box_type_text = "üöõ –°—É–ø–µ—Ä—Å–µ–π—Ñ"

                text += f"""
{status_emoji} <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring.id}</b>
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {monitoring.coefficient_min}-{monitoring.coefficient_max}
‚Ä¢ –¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏: {box_type_text}
‚Ä¢ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ: {logistics_text}
‚Ä¢ –°–∫–ª–∞–¥–æ–≤: {len(monitoring.warehouse_ids)}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}

"""

            keyboard = create_my_monitorings_keyboard(monitorings)

            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error showing monitorings for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(F.data.startswith("delete_monitoring_"))
async def delete_monitoring(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    await callback.answer()

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ callback_data
        monitoring_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id

        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            slot_repo = SlotMonitoringRepository(session)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repo.get_by_telegram_id(user_id)
            if not user:
                await callback.message.edit_text(
                    "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                    parse_mode="HTML"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            monitoring = await slot_repo.get_monitoring_by_id(monitoring_id)
            if not monitoring or monitoring.user.telegram_id != user_id:
                await callback.message.edit_text(
                    "‚ùå <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                    parse_mode="HTML"
                )
                return

            # –£–¥–∞–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            success = await slot_repo.delete_monitoring(monitoring_id, user)

            if success:
                await callback.message.edit_text(
                    f"üóëÔ∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring_id} —É–¥–∞–ª–µ–Ω</b>\n\n"
                    f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {monitoring.coefficient_min}-{monitoring.coefficient_max}\n"
                    f"‚Ä¢ –°–∫–ª–∞–¥–æ–≤: {len(monitoring.warehouse_ids)}\n\n"
                    "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
                    reply_markup=create_delete_confirmation_keyboard(
                        monitoring_id),
                    parse_mode="HTML"
                )

                logger.info(
                    f"Monitoring {monitoring_id} deleted by user {user_id}")
            else:
                await callback.message.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="HTML"
                )

    except ValueError:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π ID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error stopping monitoring: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(F.data.startswith("edit_monitoring_"))
async def start_edit_monitoring(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    user_id = callback.from_user.id

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ callback_data
        monitoring_id = int(callback.data.split("_")[-1])

        async with AsyncSessionLocal() as session:
            slot_repo = SlotMonitoringRepository(session)

            # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            monitoring = await slot_repo.get_monitoring_by_id(monitoring_id)

            if not monitoring or monitoring.user.telegram_id != user_id:
                await callback.message.edit_text(
                    "‚ùå <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                    parse_mode="HTML"
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(editing_monitoring_id=monitoring_id)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏
            box_type_text = "üåü –õ—é–±–æ–π —Ç–∏–ø"
            if monitoring.box_type_id == 2:
                box_type_text = "üì¶ –ö–æ—Ä–æ–±–∞"
            elif monitoring.box_type_id == 5:
                box_type_text = "üõí –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã"
            elif monitoring.box_type_id == 6:
                box_type_text = "üöõ –°—É–ø–µ—Ä—Å–µ–π—Ñ"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback.message.edit_text(
                f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ #{monitoring_id}</b>\n\n"
                f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
                f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {monitoring.coefficient_min}-{monitoring.coefficient_max}\n"
                f"‚Ä¢ –¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏: {box_type_text}\n"
                f"‚Ä¢ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ: {monitoring.logistics_shoulder} –¥–Ω–µ–π\n"
                f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: {monitoring.date_from.strftime('%d.%m.%Y')} - {monitoring.date_to.strftime('%d.%m.%Y')}\n"
                f"‚Ä¢ –°–∫–ª–∞–¥—ã: {len(monitoring.warehouse_ids)} —à—Ç.\n\n"
                f"<b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>",
                reply_markup=create_edit_monitoring_keyboard(),
                parse_mode="HTML"
            )

            await state.set_state(MonitoringStates.editing_monitoring)

    except ValueError:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π ID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error starting edit monitoring: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(F.data == "edit_coefficient")
async def edit_coefficient(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    await callback.message.edit_text(
        "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–æ—Ç 0 –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ):",
        reply_markup=create_edit_coefficient_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(MonitoringStates.editing_coefficient)


@monitoring_router.callback_query(F.data.startswith("edit_coeff_"))
async def select_edit_coefficient(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ callback_data
        parts = callback.data.split("_")
        coeff_min = int(parts[2])
        coeff_max = int(parts[3])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        await state.update_data(
            coefficient_min=coeff_min,
            coefficient_max=coeff_max
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        data = await state.get_data()
        monitoring_id = data.get("editing_monitoring_id")

        await callback.message.edit_text(
            f"‚úÖ <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n"
            f"‚Ä¢ –ù–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {coeff_min}-{coeff_max}\n\n"
            f"<b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring_id}</b>\n"
            f"–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üöö –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ", callback_data="edit_logistics_shoulder")],
                [InlineKeyboardButton(
                    text="üìÖ –ü–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data="edit_date_range")],
                [InlineKeyboardButton(
                    text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="confirm_edit")],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="my_monitorings")]
            ]),
            parse_mode="HTML"
        )

        await state.set_state(MonitoringStates.editing_monitoring)

    except Exception as e:
        logger.error(f"Error selecting edit coefficient: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞</b>",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(F.data == "edit_box_type")
async def edit_box_type(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    await callback.message.edit_text(
        "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏</b>\n\n"
        "–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–æ—Å–æ–± –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥ WB:",
        reply_markup=create_edit_box_type_keyboard(),
        parse_mode="HTML"
    )


@monitoring_router.callback_query(F.data.startswith("edit_box_type_"))
async def select_edit_box_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏ –∏–∑ callback_data
        box_type_data = {
            "edit_box_type_2": (2, "üì¶ –ö–æ—Ä–æ–±–∞"),
            "edit_box_type_5": (5, "üõí –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã"),
            "edit_box_type_6": (6, "üöõ –°—É–ø–µ—Ä—Å–µ–π—Ñ"),
            "edit_box_type_any": (None, "üåü –õ—é–±–æ–π —Ç–∏–ø")
        }

        if callback.data in box_type_data:
            box_type_id, box_type_text = box_type_data[callback.data]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏
            await state.update_data(
                box_type_id=box_type_id,
                box_type_text=box_type_text
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            data = await state.get_data()
            monitoring_id = data.get("editing_monitoring_id")

            await callback.message.edit_text(
                f"‚úÖ <b>–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                f"‚Ä¢ –ù–æ–≤—ã–π —Ç–∏–ø: {box_type_text}\n\n"
                f"<b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring_id}</b>\n"
                f"–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                reply_markup=create_edit_confirm_keyboard(),
                parse_mode="HTML"
            )

            await state.set_state(MonitoringStates.editing_monitoring)

    except Exception as e:
        logger.error(f"Error selecting edit box type: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–ø–∞–∫–æ–≤–∫–∏</b>",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(F.data == "edit_logistics_shoulder")
async def edit_logistics_shoulder(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ"""
    await callback.message.edit_text(
        "üöö <b>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ</b>\n\n"
        "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥?",
        reply_markup=create_edit_logistics_shoulder_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(MonitoringStates.editing_logistics_shoulder)


@monitoring_router.callback_query(F.data.startswith("edit_logistics_"))
async def select_edit_logistics_shoulder(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–µ—á–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        days = int(callback.data.split("_")[-1])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ
        await state.update_data(logistics_shoulder=days)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        data = await state.get_data()
        monitoring_id = data.get("editing_monitoring_id")

        await callback.message.edit_text(
            f"‚úÖ <b>–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n"
            f"‚Ä¢ –ù–æ–≤–æ–µ –ø–ª–µ—á–æ: {days} –¥–Ω–µ–π\n\n"
            f"<b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring_id}</b>\n"
            f"–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", callback_data="edit_coefficient")],
                [InlineKeyboardButton(
                    text="üìÖ –ü–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data="edit_date_range")],
                [InlineKeyboardButton(
                    text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="confirm_edit")],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="my_monitorings")]
            ]),
            parse_mode="HTML"
        )

        await state.set_state(MonitoringStates.editing_monitoring)

    except Exception as e:
        logger.error(f"Error selecting edit logistics shoulder: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–µ—á–∞</b>",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(F.data == "confirm_edit")
async def confirm_edit_monitoring(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    user_id = callback.from_user.id

    try:
        data = await state.get_data()
        monitoring_id = data.get("editing_monitoring_id")

        if not monitoring_id:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞: ID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                parse_mode="HTML"
            )
            return

        async with AsyncSessionLocal() as session:
            slot_repo = SlotMonitoringRepository(session)

            # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            monitoring = await slot_repo.get_monitoring_by_id(monitoring_id)

            if not monitoring or monitoring.user.telegram_id != user_id:
                await callback.message.edit_text(
                    "‚ùå <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                    parse_mode="HTML"
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            update_data = {}

            if "coefficient_min" in data:
                update_data["coefficient_min"] = data["coefficient_min"]
            if "coefficient_max" in data:
                update_data["coefficient_max"] = data["coefficient_max"]
            if "box_type_id" in data:
                update_data["box_type_id"] = data["box_type_id"]
            if "logistics_shoulder" in data:
                update_data["logistics_shoulder"] = data["logistics_shoulder"]
            if "date_from" in data:
                update_data["date_from"] = data["date_from"]
            if "date_to" in data:
                update_data["date_to"] = data["date_to"]

            if update_data:
                success = await slot_repo.update_monitoring(monitoring_id, **update_data)

                if success:
                    await session.commit()

                    # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    from app.services.slot_monitor import slot_monitor_service
                    if slot_monitor_service:
                        slot_monitor_service.clear_monitoring_cache(
                            monitoring_id)

                    await callback.message.edit_text(
                        f"‚úÖ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring_id} –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.\n\n"
                        f"üîÑ <b>–ö—ç—à –æ—á–∏—â–µ–Ω</b> - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–Ω–µ—Ç –ø–æ–∏—Å–∫ —Å –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(
                                text="üìä –ú–æ–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏", callback_data="my_monitorings")],
                            [InlineKeyboardButton(
                                text="üìä –ö–∞–±–∏–Ω–µ—Ç", callback_data="cabinet_info")]
                        ]),
                        parse_mode="HTML"
                    )

                    logger.info(
                        f"Monitoring {monitoring_id} updated by user {user_id}, cache cleared")
                else:
                    await callback.message.edit_text(
                        "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        parse_mode="HTML"
                    )
            else:
                await callback.message.edit_text(
                    "‚ÑπÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ</b>\n\n"
                    "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üìä –ú–æ–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏", callback_data="my_monitorings")]
                    ]),
                    parse_mode="HTML"
                )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

    except Exception as e:
        logger.error(f"Error confirming edit monitoring: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(F.data == "edit_date_range")
async def edit_date_range(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        data = await state.get_data()
        monitoring_id = data.get("editing_monitoring_id")

        if not monitoring_id:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞: ID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                parse_mode="HTML"
            )
            return

        async with AsyncSessionLocal() as session:
            slot_repo = SlotMonitoringRepository(session)

            # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            monitoring = await slot_repo.get_monitoring_by_id(monitoring_id)

            if not monitoring:
                await callback.message.edit_text(
                    "‚ùå <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                    parse_mode="HTML"
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            await callback.message.edit_text(
                f"üìÖ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ #{monitoring_id}</b>\n\n"
                f"<b>–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥:</b>\n"
                f"‚Ä¢ –°: {monitoring.date_from.strftime('%d.%m.%Y')}\n"
                f"‚Ä¢ –ü–æ: {monitoring.date_to.strftime('%d.%m.%Y')}\n\n"
                f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥:</b>",
                reply_markup=create_edit_date_range_keyboard(),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"Error editing date range: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞</b>",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(F.data == "edit_select_dates")
async def edit_select_dates(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–∞—Ç –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        today = datetime.now()
        calendar_keyboard = create_calendar(today.year, today.month)

        await callback.message.edit_text(
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.",
            reply_markup=calendar_keyboard,
            parse_mode="HTML"
        )

        await state.set_state(MonitoringStates.editing_date_from)

    except Exception as e:
        logger.error(f"Error selecting edit dates: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç</b>",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(F.data == "edit_quick_period")
async def edit_quick_period(callback: CallbackQuery, state: FSMContext):
    """–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        await callback.message.edit_text(
            "üìä <b>–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
            reply_markup=create_edit_quick_period_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error selecting edit quick period: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞</b>",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(F.data.startswith("edit_period_"))
async def select_edit_period(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        days = int(callback.data.split("_")[-1])

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
        today = datetime.now().date()
        date_from = today
        date_to = today + timedelta(days=days)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ
        data = await state.get_data()
        logistics_shoulder = data.get('logistics_shoulder', 0)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ —Ç–æ–ª—å–∫–æ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ
        date_from_with_shoulder = date_from + timedelta(days=logistics_shoulder)
        date_to_with_shoulder = date_to  # –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–µ—á–∞
        await state.update_data(
            date_from=date_from_with_shoulder,
            date_to=date_to_with_shoulder
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        data = await state.get_data()
        monitoring_id = data.get("editing_monitoring_id")

        await callback.message.edit_text(
            f"‚úÖ <b>–ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"‚Ä¢ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {date_from.strftime('%d.%m.%Y')} - {date_to.strftime('%d.%m.%Y')}\n"
            f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {days} –¥–Ω–µ–π\n\n"
            f"<b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring_id}</b>\n"
            f"–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", callback_data="edit_coefficient")],
                [InlineKeyboardButton(
                    text="üì¶ –¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏", callback_data="edit_box_type")],
                [InlineKeyboardButton(
                    text="üöö –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ", callback_data="edit_logistics_shoulder")],
                [InlineKeyboardButton(
                    text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="confirm_edit")],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="my_monitorings")]
            ]),
            parse_mode="HTML"
        )

        await state.set_state(MonitoringStates.editing_monitoring)

    except Exception as e:
        logger.error(f"Error selecting edit period: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞</b>",
            parse_mode="HTML"
        )


@monitoring_router.callback_query(MonitoringStates.editing_date_from)
async def handle_edit_date_from_calendar(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await handle_calendar_navigation(callback, state)
    await handle_date_selection(callback, state, "from")


@monitoring_router.callback_query(MonitoringStates.editing_date_to)
async def handle_edit_date_to_calendar(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await handle_calendar_navigation(callback, state)
    await handle_date_selection(callback, state, "to")


@monitoring_router.callback_query(F.data == "edit_monitoring_back")
async def back_to_edit_menu(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    monitoring_id = data.get("editing_monitoring_id")

    if not monitoring_id:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞: ID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
            parse_mode="HTML"
        )
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await start_edit_monitoring(callback, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
