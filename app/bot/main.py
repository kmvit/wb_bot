"""–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞"""

import asyncio
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from loguru import logger

from app.config.settings import settings
from app.config.logging import setup_logging
from app.database.database import init_database, AsyncSessionLocal
from app.database.repositories.slot_monitoring_repo import SlotMonitoringRepository
from app.database.models import MonitoringStatus
from app.bot.handlers.auth import auth_router
from app.bot.handlers.cabinet import cabinet_router
from app.bot.handlers.monitoring import monitoring_router
from app.services.slot_monitor import get_slot_monitor_service
from app.services.session_manager import session_manager


async def clear_all_active_monitorings():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        logger.info("üßπ Clearing all active monitorings on bot startup...")
        
        async with AsyncSessionLocal() as session:
            slot_repo = SlotMonitoringRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
            active_monitorings = await slot_repo.get_all_active_monitorings()
            
            if not active_monitorings:
                logger.info("‚úÖ No active monitorings found")
                return None
            
            logger.info(f"üìä Found {len(active_monitorings)} active monitorings to clear")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            user_monitorings = {}
            for monitoring in active_monitorings:
                user_id = monitoring.user.telegram_id
                if user_id not in user_monitorings:
                    user_monitorings[user_id] = []
                user_monitorings[user_id].append(monitoring)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
            cleared_count = 0
            for monitoring in active_monitorings:
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "stopped"
                    success = await slot_repo.update_monitoring_status(
                        monitoring.id, 
                        MonitoringStatus.STOPPED
                    )
                    
                    if success:
                        cleared_count += 1
                        logger.info(f"‚úÖ Stopped monitoring #{monitoring.id} for user {monitoring.user.telegram_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Failed to stop monitoring #{monitoring.id}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Error stopping monitoring #{monitoring.id}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await session.commit()
            
            logger.info(f"üéØ Successfully cleared {cleared_count}/{len(active_monitorings)} active monitorings")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            return user_monitorings
            
    except Exception as e:
        logger.error(f"‚ùå Error clearing active monitorings: {e}")
        return None


async def notify_users_about_cleared_monitorings(bot, user_monitorings: dict):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞—Ö"""
    try:
        for user_id, monitorings in user_monitorings.items():
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if len(monitorings) == 1:
                    message = f"""
üîÑ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitorings[0].id} –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.

üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    """
                else:
                    monitoring_ids = [str(m.id) for m in monitorings]
                    message = f"""
üîÑ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</b>

üìä –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤: {len(monitorings)}
üÜî ID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤: {', '.join(monitoring_ids)}

üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    """
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode="HTML"
                )
                
                logger.info(f"üì§ Sent restart notification to user {user_id}")
                
            except Exception as e:
                logger.error(f"‚ùå Error sending notification to user {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"‚ùå Error notifying users about cleared monitorings: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    logger.info("Starting Wildberries Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_database()
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    user_monitorings = await clear_all_active_monitorings()
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(
        token=settings.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞—Ö
    if user_monitorings:
        await notify_users_about_cleared_monitorings(bot, user_monitorings)
    
    dp = Dispatcher()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(auth_router)
    dp.include_router(cabinet_router)
    dp.include_router(monitoring_router)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤
        slot_monitor = get_slot_monitor_service(bot)
        await slot_monitor.start_monitoring()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å–µ—Å—Å–∏–π
        session_cleanup_task = asyncio.create_task(periodic_session_cleanup())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Bot started successfully")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error running bot: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        slot_monitor = get_slot_monitor_service(bot)
        await slot_monitor.stop_monitoring()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å–µ—Å—Å–∏–π
        if 'session_cleanup_task' in locals():
            session_cleanup_task.cancel()
            try:
                await session_cleanup_task
            except asyncio.CancelledError:
                pass
        
        await bot.session.close()


async def periodic_session_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            await session_manager.cleanup_expired_sessions()
            logger.info("Session cleanup completed")
        except asyncio.CancelledError:
            break
        except Exception as e:
            logger.error(f"Error during session cleanup: {e}")


if __name__ == "__main__":
    asyncio.run(main())

