"""–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple, Any
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException, NoSuchElementException
from loguru import logger

from app.services.wb_web_auth import WBWebAuthService, WBWebAuthError
from app.utils.browser_config import create_undetectable_chrome_options, setup_undetectable_chrome


class BookingServiceError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    pass


class BookingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤"""
    
    def __init__(self, auth_service: Optional[WBWebAuthService] = None):
        self.wb_auth_service = auth_service or WBWebAuthService()
        self.driver: Optional[webdriver.Chrome] = None
        self.wait: Optional[WebDriverWait] = None
    
    async def _ensure_browser_ready(self):
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"""
        if not self.driver:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—Ä–∞—É–∑–µ—Ä –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if self.wb_auth_service.driver:
                logger.info("Using existing browser from auth service for booking...")
                self.driver = self.wb_auth_service.driver
                self.wait = self.wb_auth_service.wait
            else:
                logger.info("No existing browser found, initializing new one for booking...")
                await self._initialize_browser()
    
    async def _initialize_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            import os
            import tempfile
            import uuid
            profile_dir = os.path.join(tempfile.gettempdir(), f'wb_bot_booking_profile_{uuid.uuid4().hex[:8]}')
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏
            options = create_undetectable_chrome_options(profile_dir=profile_dir)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            self.driver = webdriver.Chrome(options=options)
            self.wait = WebDriverWait(self.driver, 15)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏
            setup_undetectable_chrome(self.driver)
            
            logger.info("Booking browser initialized successfully")
            
        except Exception as e:
            logger.error(f"Error initializing booking browser: {e}")
            await self._cleanup()
            raise
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if self.driver and self.driver != self.wb_auth_service.driver:
                self.driver.quit()
        except:
            pass
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä–∞–π–≤–µ—Ä, –Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        self.driver = None
        self.wait = None
    
    async def book_slot(
        self, 
        session_data: Dict[str, Any], 
        order_number: str, 
        target_date: datetime,
        target_warehouse_id: int
    ) -> Tuple[bool, str]:
        """
        –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        
        Args:
            session_data: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_number: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ —Å–ª–æ—Ç–∞
            target_warehouse_id: ID —Ü–µ–ª–µ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            logger.info(f"Starting booking process for order {order_number}, date {target_date.date()}, warehouse {target_warehouse_id}")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤
            await self._ensure_browser_ready()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            await self._restore_session(session_data)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏
            await self._navigate_to_supply_detail(order_number)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–∫–∏–Ω—É–ª–æ –ª–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            current_url = self.driver.current_url or ''
            if 'seller-auth.wildberries.ru' in current_url:
                raise BookingServiceError("Session expired, need to reauthorize")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if 'supply-detail' not in self.driver.current_url:
                raise BookingServiceError(f"Failed to navigate to order details page for order {order_number}")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É"
            await self._click_plan_supply_button()
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            await asyncio.sleep(1)
            
            # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω—É–∂–Ω–æ–π –¥–∞—Ç–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            await self._click_calendar_date(target_date, target_warehouse_id, order_number)
            
            logger.info(f"‚úÖ Successfully booked slot for order {order_number}")
            return True, f"–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_number} –Ω–∞ {target_date.strftime('%d.%m.%Y')}"
            
        except BookingServiceError:
            raise
        except Exception as e:
            logger.error(f"Error booking slot for order {order_number}: {e}")
            raise BookingServiceError(f"–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        finally:
            await self._cleanup()
    
    async def _restore_session(self, session_data: Dict[str, Any]):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é"""
        try:
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –æ–Ω
            if self.driver == self.wb_auth_service.driver:
                logger.info("üåê Using existing browser from auth service, checking current state...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
                current_url = self.driver.current_url or ''
                
                # –ï—Å–ª–∏ —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—Å—Ç–∞–≤–æ–∫, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∏–∫—É–¥–∞
                if 'supplies-management' in current_url:
                    logger.info("‚úÖ Already on supplies page, skipping navigation")
                    return
                
                # –ï—Å–ª–∏ —É–∂–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ, –Ω–æ –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—Å—Ç–∞–≤–æ–∫, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
                # (–º—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏)
                if 'seller.wildberries.ru' in current_url and 'seller-auth.wildberries.ru' not in current_url:
                    logger.info("‚úÖ Already in seller cabinet, ready for direct navigation to supply detail")
                    return
                
                # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                if 'seller-auth.wildberries.ru' in current_url:
                    logger.info("üîë Browser not authorized, restoring session...")
                    await self._restore_session_data(session_data)
                else:
                    # –ì–æ—Ç–æ–≤—ã –∫ –ø—Ä—è–º–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏
                    logger.info("üåê Ready for direct navigation to supply detail page")
            else:
                # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                logger.info("üåê Restoring session in new browser...")
                await self._restore_session_data(session_data)
            
        except Exception as e:
            logger.error(f"Error restoring session: {e}")
            raise BookingServiceError(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")
    
    async def _restore_session_data(self, session_data: Dict[str, Any]):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies
        if 'cookies' in session_data:
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ cookies
            self.driver.delete_all_cookies()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ cookies
            restored_count = 0
            for cookie in session_data['cookies']:
                try:
                    cookie_copy = dict(cookie)
                    # Selenium –æ–∂–∏–¥–∞–µ—Ç int –¥–ª—è expiry
                    if 'expiry' in cookie_copy and isinstance(cookie_copy['expiry'], float):
                        cookie_copy['expiry'] = int(cookie_copy['expiry'])
                    # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è Selenium
                    cookie_copy.pop('sameSite', None)
                    cookie_copy.pop('priority', None)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π domain –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if 'domain' not in cookie_copy or not cookie_copy['domain']:
                        cookie_copy['domain'] = '.wildberries.ru'
                    
                    self.driver.add_cookie(cookie_copy)
                    restored_count += 1
                except Exception as e:
                    logger.debug(f"Could not add cookie: {e}")
            
            logger.info(f"üîë Successfully restored {restored_count} cookies")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º localStorage –∏ sessionStorage
            if 'local_storage' in session_data:
                try:
                    for key, value in session_data['local_storage'].items():
                        self.driver.execute_script(f"localStorage.setItem('{key}', '{value}');")
                except Exception as e:
                    logger.debug(f"Could not restore localStorage: {e}")
            
            if 'session_storage' in session_data:
                try:
                    for key, value in session_data['session_storage'].items():
                        self.driver.execute_script(f"sessionStorage.setItem('{key}', '{value}');")
                except Exception as e:
                    logger.debug(f"Could not restore sessionStorage: {e}")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ cookies
            logger.info("üîÑ Refreshing page with restored session")
            self.driver.refresh()
            await asyncio.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            current_url = self.driver.current_url or ''
            if 'seller-auth.wildberries.ru' in current_url:
                raise BookingServiceError("Session restoration failed - still on auth page")
    
    async def _navigate_to_supply_detail(self, order_number: str):
        """–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞"""
        try:
            logger.info(f"üöÄ Navigating directly to supply detail page for order: {order_number}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏
            supply_detail_url = f"https://seller.wildberries.ru/supplies-management/all-supplies/supply-detail?preorderId={order_number}&supplyId"
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏
            self.driver.get(supply_detail_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try:
                self.wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'div[class*="Supply-detail"]'))
                )
                logger.info("‚úÖ Successfully navigated to supply detail page")
            except TimeoutException:
                logger.warning("‚ö†Ô∏è Timeout waiting for supply detail page to load")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                current_url = self.driver.current_url or ''
                if 'supply-detail' in current_url and order_number in current_url:
                    logger.info("‚úÖ URL contains correct order number, continuing...")
                else:
                    raise BookingServiceError(f"Failed to navigate to supply detail page for order {order_number}")
            
        except BookingServiceError:
            raise
        except Exception as e:
            logger.error(f"Error navigating to supply detail: {e}")
            raise BookingServiceError(f"Failed to navigate to supply detail page: {e}")
    
    async def _click_plan_supply_button(self):
        """–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É'"""
        try:
            logger.info("üîç Looking for '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É' button...")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try:
                all_buttons = self.driver.find_elements(By.TAG_NAME, 'button')
                logger.info(f"üìã Found {len(all_buttons)} buttons on page")
                for i, btn in enumerate(all_buttons[:10]):  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    try:
                        btn_text = btn.text.strip()
                        btn_class = btn.get_attribute('class') or ''
                        if btn_text or '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' in btn_class.lower():
                            logger.info(f"Button {i}: text='{btn_text}', class='{btn_class[:100]}...'")
                    except Exception as e:
                        logger.debug(f"Error getting button {i} info: {e}")
            except Exception as e:
                logger.debug(f"Error logging buttons: {e}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            button_selectors = [
                '//button[contains(text(), "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É")]',
                '//button[contains(text(), "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")]',
                '//span[contains(text(), "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É")]/parent::button',
                '//span[contains(text(), "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")]/parent::button',
                'div[class*="Supply-detail-options__plan-desktop-button"] button',
                'div[class*="Supply-detail-options__plan-desktop-button__-N407e2FDC"] button',
                'button[class*="button__ymbakhzRxO"]',
                'button[class*="fullWidth"]',
                'button[class*="fullWidth__7wrfVPCWJP"]',
                'div[class*="Supply-detail-options__buttons"] button',
                'div[class*="Supply-detail-options__wrapper"] button',
                'div[class*="Supply-detail"] button',
                'button[data-testid*="plan"]',
                'button[data-testid*="supply"]'
            ]
            
            button = None
            for selector in button_selectors:
                try:
                    if selector.startswith('//'):
                        # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä
                        elements = self.driver.find_elements(By.XPATH, selector)
                    else:
                        # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    for element in elements:
                        if element.is_displayed() and element.is_enabled():
                            button_text = element.text.strip()
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ span —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                            span_text = ""
                            try:
                                spans = element.find_elements(By.TAG_NAME, 'span')
                                for span in spans:
                                    span_text += span.text.strip() + " "
                            except:
                                pass
                            
                            full_text = (button_text + " " + span_text).lower()
                            if any(keyword in full_text for keyword in ["–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "–ø–æ—Å—Ç–∞–≤–∫—É", "plan"]):
                                button = element
                                logger.info(f"‚úÖ Found '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É' button with selector: {selector}")
                                logger.info(f"Button text: '{button_text}', Span text: '{span_text.strip()}'")
                                break
                    
                    if button:
                        break
                        
                except Exception as e:
                    logger.debug(f"Selector {selector} failed: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ä–∞–∑—É, –ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            if not button:
                logger.info("üîç Trying more specific selectors...")
                specific_selectors = [
                    '//span[@class="caption__kqFcIewCT5" and contains(text(), "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É")]/parent::button',
                    '//span[contains(@class, "caption") and contains(text(), "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")]/parent::button',
                    'div.Supply-detail-options__plan-desktop-button__-N407e2FDC button',
                    'div[class*="Supply-detail-options__plan-desktop-button"] button.button__ymbakhzRxO',
                    'button.button__ymbakhzRxO.fullWidth__7wrfVPCWJP'
                ]
                
                for selector in specific_selectors:
                    try:
                        if selector.startswith('//'):
                            elements = self.driver.find_elements(By.XPATH, selector)
                        else:
                            elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        
                        for element in elements:
                            if element.is_displayed() and element.is_enabled():
                                button = element
                                logger.info(f"‚úÖ Found '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É' button with specific selector: {selector}")
                                break
                        
                        if button:
                            break
                            
                    except Exception as e:
                        logger.debug(f"Specific selector {selector} failed: {e}")
                        continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è
            if not button:
                logger.info("‚è≥ Button not found with specific selectors, waiting for appearance...")
                try:
                    button = self.wait.until(
                        EC.element_to_be_clickable((By.XPATH, '//span[contains(text(), "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É")]/parent::button'))
                    )
                    logger.info("‚úÖ '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É' button appeared after waiting")
                except TimeoutException:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –ª—é–±—É—é –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å"
                    try:
                        button = self.wait.until(
                            EC.element_to_be_clickable((By.XPATH, '//button[contains(text(), "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")]'))
                        )
                        logger.info("‚úÖ Found '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' button after extended waiting")
                    except TimeoutException:
                        raise BookingServiceError("'–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É' button not found")
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
            try:
                logger.info("üñ±Ô∏è Clicking '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É' button...")
                button.click()
            except Exception as e:
                logger.warning(f"Regular click failed: {e}, trying JavaScript click...")
                self.driver.execute_script("arguments[0].click();", button)
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
            try:
                logger.info("‚è≥ Waiting for modal window with calendar...")
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                modal = self.wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, '[class*="modal"], [class*="Modal"], [class*="popup"], [class*="Popup"]'))
                )
                logger.info("‚úÖ Modal window appeared")
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                calendar_element = self.wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'table[class*="Calendar-plan-table-view"]'))
                )
                logger.info("‚úÖ Calendar appeared in modal window")
                return
                
            except TimeoutException:
                logger.error("‚ùå Timeout waiting for modal window or calendar")
                raise BookingServiceError("–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å")
            
        except BookingServiceError:
            raise
        except Exception as e:
            logger.error(f"Error clicking plan supply button: {e}")
            raise BookingServiceError(f"–û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É': {str(e)}")
    
    async def _click_calendar_date(self, target_date: datetime, target_warehouse_id: int, order_number: str):
        """–ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –Ω—É–∂–Ω–æ–π –¥–∞—Ç–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        try:
            logger.info(f"üîç Looking for date {target_date.strftime('%d.%m.%Y')} in calendar...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Ç–æ–¥–∞
            target_day = target_date.strftime('%d').lstrip('0')  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å (1 –≤–º–µ—Å—Ç–æ 01)
            target_day_padded = target_date.strftime('%d').zfill(2)  # –° –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º (01)
            
            # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
            russian_months = {
                1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
                5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
                9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
            }
            target_month = russian_months[target_date.month]
            
            logger.info(f"Looking for day: {target_day} or {target_day_padded}, month: {target_month}")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            try:
                self.wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'table[class*="Calendar-plan-table-view"]'))
                )
            except TimeoutException:
                raise BookingServiceError("Calendar table not found")
            
            # –ò—â–µ–º —è—á–µ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            calendar_cells = self.driver.find_elements(By.CSS_SELECTOR, 'td[data-testid^="calendar-cell"]')
            logger.info(f"Found {len(calendar_cells)} calendar cells")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for i, cell in enumerate(calendar_cells[:10]):  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                try:
                    date_elements = cell.find_elements(By.CSS_SELECTOR, 'span[data-name="Text"]')
                    for date_element in date_elements:
                        date_text = (date_element.text or '').strip()
                        if date_text and any(month in date_text.lower() for month in ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']):
                            logger.info(f"Cell {i}: Found date text: '{date_text}'")
                            break
                except Exception as e:
                    logger.debug(f"Error checking cell {i}: {e}")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–∏—Å–∫ –ø–æ data-testid —Å –Ω–æ–º–µ—Ä–æ–º –¥–Ω—è
            logger.info(f"Also trying to find cell with day number: {target_day}")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —è—á–µ–π–∫—É –ø–æ data-testid, —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É –Ω–æ–º–µ—Ä –¥–Ω—è
            for cell in calendar_cells:
                test_id = cell.get_attribute('data-testid') or ''
                if f'-{target_day}' in test_id or f'-{target_day}-' in test_id:
                    logger.info(f"Found potential cell by testid: {test_id}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–∞—è –¥–∞—Ç–∞
                    try:
                        date_elements = cell.find_elements(By.CSS_SELECTOR, 'span[data-name="Text"]')
                        for date_element in date_elements:
                            date_text = (date_element.text or '').strip().lower()
                            if (target_day in date_text or target_day_padded in date_text) and target_month in date_text:
                                logger.info(f"‚úÖ Found matching date cell by testid: {date_text}")
                                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç—Ç–æ–π —è—á–µ–π–∫–∏
                                break
                    except Exception as e:
                        logger.debug(f"Error checking cell by testid: {e}")
                        continue
            
            for cell in calendar_cells:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è—á–µ–π–∫–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
                    if 'Calendar-cell--is-disabled' in cell.get_attribute('class'):
                        continue
                    
                    # –ò—â–µ–º –¥–∞—Ç—É –≤ —è—á–µ–π–∫–µ
                    date_elements = cell.find_elements(By.CSS_SELECTOR, 'span[data-name="Text"]')
                    for date_element in date_elements:
                        date_text = (date_element.text or '').strip().lower()
                        logger.debug(f"Checking date text: '{date_text}'")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω—É—é –¥–∞—Ç—É (–∏—â–µ–º –∏ —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º, –∏ –±–µ–∑)
                        if ((target_day in date_text or target_day_padded in date_text) and 
                            target_month in date_text):
                            logger.info(f"‚úÖ Found matching date cell: {date_text}")
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                            expected_text_1 = f"{target_day} {target_month}"
                            expected_text_2 = f"{target_day_padded} {target_month}"
                            if expected_text_1 in date_text or expected_text_2 in date_text:
                                logger.info(f"‚úÖ Exact match found: '{expected_text_1}' or '{expected_text_2}' in '{date_text}'")
                            else:
                                logger.info(f"‚úÖ Partial match found: day '{target_day}'/'{target_day_padded}' and month '{target_month}' in '{date_text}'")
                            
                            # –ê–ª–≥–æ—Ä–∏—Ç–º: —Å–Ω–∞—á–∞–ª–∞ –∫–ª–∏–∫–∞–µ–º –ø–æ —è—á–µ–π–∫–µ, –ø–æ—Ç–æ–º –∏—â–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å"
                            logger.info("üñ±Ô∏è Step 1: Clicking on date cell...")
                            try:
                                cell.click()
                                logger.info("‚úÖ Clicked on date cell successfully")
                            except Exception as e:
                                logger.warning(f"Regular click failed: {e}, trying JavaScript click...")
                                self.driver.execute_script("arguments[0].click();", cell)
                                logger.info("‚úÖ Clicked on date cell with JavaScript")
                            
                            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å" –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
                            logger.info("üîç Step 2: Looking for '–í—ã–±—Ä–∞—Ç—å' button...")
                            
                            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É –≤ —è—á–µ–π–∫–µ
                            choose_button = None
                            choose_selectors = [
                                './/button[contains(text(), "–í—ã–±—Ä–∞—Ç—å")]',
                                './/button[text()="–í—ã–±—Ä–∞—Ç—å"]',
                                'button[data-testid*="choose"]',
                                'button[data-testid*="select"]',
                                'button[data-testid*="–í—ã–±—Ä–∞—Ç—å"]',
                                'div[class*="button-container"] button',
                                'div[class*="Calendar-cell__button-container"] button',
                                'button[class*="choose"]',
                                'button[class*="select"]'
                            ]
                            
                            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–∞–º–æ–π —è—á–µ–π–∫–µ
                            for selector in choose_selectors:
                                try:
                                    if selector.startswith('.//'):
                                        # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä
                                        buttons = cell.find_elements(By.XPATH, selector)
                                    else:
                                        # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
                                        buttons = cell.find_elements(By.CSS_SELECTOR, selector)
                                    
                                    for button in buttons:
                                        if button.is_displayed() and button.is_enabled():
                                            button_text = button.text.strip()
                                            if button_text == "–í—ã–±—Ä–∞—Ç—å" or "–≤—ã–±—Ä–∞—Ç—å" in button_text.lower():
                                                choose_button = button
                                                logger.info(f"‚úÖ Found '–í—ã–±—Ä–∞—Ç—å' button in cell with selector: {selector}")
                                                break
                                    
                                    if choose_button:
                                        break
                                        
                                except Exception as e:
                                    logger.debug(f"Selector {selector} failed: {e}")
                                    continue
                            
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —è—á–µ–π–∫–µ, –∏—â–µ–º –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                            if not choose_button:
                                logger.info("üîç Button not found in cell, searching in modal...")
                                for selector in choose_selectors:
                                    try:
                                        if selector.startswith('.//'):
                                            # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä - —É–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–µ
                                            xpath = selector[2:]
                                            buttons = self.driver.find_elements(By.XPATH, xpath)
                                        else:
                                            # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
                                            buttons = self.driver.find_elements(By.CSS_SELECTOR, selector)
                                        
                                        for button in buttons:
                                            if button.is_displayed() and button.is_enabled():
                                                button_text = button.text.strip()
                                                if button_text == "–í—ã–±—Ä–∞—Ç—å" or "–≤—ã–±—Ä–∞—Ç—å" in button_text.lower():
                                                    choose_button = button
                                                    logger.info(f"‚úÖ Found '–í—ã–±—Ä–∞—Ç—å' button in modal with selector: {selector}")
                                                    break
                                        
                                        if choose_button:
                                            break
                                            
                                    except Exception as e:
                                        logger.debug(f"Modal selector {selector} failed: {e}")
                                        continue
                            
                            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è
                            if not choose_button:
                                logger.info("‚è≥ Button not found immediately, waiting for appearance...")
                                try:
                                    choose_button = self.wait.until(
                                        EC.element_to_be_clickable((By.XPATH, '//button[contains(text(), "–í—ã–±—Ä–∞—Ç—å")]'))
                                    )
                                    logger.info("‚úÖ '–í—ã–±—Ä–∞—Ç—å' button appeared after waiting")
                                except TimeoutException:
                                    logger.error("‚ùå '–í—ã–±—Ä–∞—Ç—å' button did not appear after clicking cell")
                                    raise BookingServiceError("–ö–Ω–æ–ø–∫–∞ '–í—ã–±—Ä–∞—Ç—å' –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ")
                            
                            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–í—ã–±—Ä–∞—Ç—å"
                            try:
                                logger.info("üñ±Ô∏è Clicking '–í—ã–±—Ä–∞—Ç—å' button...")
                                choose_button.click()
                                logger.info("‚úÖ Clicked '–í—ã–±—Ä–∞—Ç—å' button successfully")
                            except Exception as e:
                                logger.warning(f"Regular click failed: {e}, trying JavaScript click...")
                                self.driver.execute_script("arguments[0].click();", choose_button)
                                logger.info("‚úÖ Clicked '–í—ã–±—Ä–∞—Ç—å' button with JavaScript")
                            
                            # –ñ–¥–µ–º, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å" —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
                            logger.info("‚è≥ Waiting for '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' button to become active after date selection...")
                            await asyncio.sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è DOM –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
                            try:
                                calendar_buttons_after = self.driver.find_elements(By.CSS_SELECTOR, 'div[class*="Calendar-plan-buttons"] button')
                                logger.info(f"üìã Found {len(calendar_buttons_after)} buttons in calendar block after date selection")
                                for i, btn in enumerate(calendar_buttons_after):
                                    try:
                                        btn_text = btn.text.strip()
                                        btn_class = btn.get_attribute('class') or ''
                                        btn_enabled = btn.is_enabled()
                                        btn_displayed = btn.is_displayed()
                                        logger.info(f"Calendar Button {i} after selection: text='{btn_text}', enabled={btn_enabled}, displayed={btn_displayed}, class='{btn_class[:100]}...'")
                                    except Exception as e:
                                        logger.debug(f"Error getting calendar button {i} info after selection: {e}")
                            except Exception as e:
                                logger.debug(f"Error logging calendar buttons after selection: {e}")
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞–Ω–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
                            try:
                                self.wait.until(
                                    EC.element_to_be_clickable((By.XPATH, '//span[contains(text(), "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")]/parent::button'))
                                )
                                logger.info("‚úÖ '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' button became clickable after date selection")
                            except TimeoutException:
                                logger.warning("‚ö†Ô∏è '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' button did not become clickable, proceeding anyway...")
                            
                            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                            logger.info("üöÄ Step 3: Proceeding to booking confirmation...")
                            await self._confirm_booking(order_number)
                            return
                            logger.error("‚ùå '–í—ã–±—Ä–∞—Ç—å' button not found in date cell - booking cannot proceed")
                            raise BookingServiceError("–ö–Ω–æ–ø–∫–∞ '–í—ã–±—Ä–∞—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —è—á–µ–π–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
                            
                except Exception as e:
                    logger.debug(f"Error checking calendar cell: {e}")
                    continue
            
            raise BookingServiceError(f"Date {target_date.strftime('%d.%m.%Y')} not found in calendar")
            
        except BookingServiceError:
            raise
        except Exception as e:
            logger.error(f"Error clicking calendar date {target_date.strftime('%d.%m.%Y')}: {e}")
            raise BookingServiceError(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã {target_date.strftime('%d.%m.%Y')}: {str(e)}")
    
    async def _confirm_booking(self, order_number: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å"""
        try:
            logger.info("üîç Looking for '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' confirmation button...")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å" –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º –±–ª–æ–∫–µ
            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
                confirm_button = self.wait.until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, 'div[class*="Calendar-plan-buttons__transfer"] button[class*="button__I8dwnFm136"]'))
                )
                logger.info("‚úÖ Found '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' button")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
                if not confirm_button.is_enabled():
                    logger.warning("‚ö†Ô∏è Button is disabled, waiting for it to become enabled...")
                    await asyncio.sleep(0.5)
                    if not confirm_button.is_enabled():
                        raise BookingServiceError("–ö–Ω–æ–ø–∫–∞ '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
                
                # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
                logger.info("üñ±Ô∏è Clicking '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' button...")
                try:
                    confirm_button.click()
                    logger.info("‚úÖ Button clicked successfully")
                except Exception as e:
                    logger.warning(f"Regular click failed: {e}, trying JavaScript click...")
                    self.driver.execute_script("arguments[0].click();", confirm_button)
                    logger.info("‚úÖ JavaScript click successful")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                await asyncio.sleep(1.0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫
                logger.info("üîç Checking booking success by navigating to supplies page...")
                await self._check_booking_success(order_number)
                
            except TimeoutException:
                raise BookingServiceError("–ö–Ω–æ–ø–∫–∞ '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π")
            except Exception as e:
                logger.error(f"Error clicking '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' button: {e}")
                raise BookingServiceError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å': {e}")
        
        except BookingServiceError:
            raise
        except Exception as e:
            logger.error(f"Unexpected error in _confirm_booking: {e}")
            raise BookingServiceError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def _check_booking_success(self, order_number: str):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫"""
        try:
            logger.info(f"üìã Using order number: {order_number}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫
            logger.info("üåê Navigating to supplies page to check booking status...")
            self.driver.get("https://seller.wildberries.ru/supplies-management/all-supplies")
            await asyncio.sleep(2)
            
            # –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
            logger.info(f"üîç Looking for order {order_number} in supplies list...")
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–∫–∞–∑–æ–º
            order_row = None
            max_scroll_attempts = 5
            
            for scroll_attempt in range(max_scroll_attempts):
                try:
                    # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å—Ç–∞–≤–æ–∫
                    rows = self.driver.find_elements(By.CSS_SELECTOR, 'tr[class*="Table-row"], div[class*="Table-row"], [class*="supply-row"]')
                    
                    for row in rows:
                        try:
                            row_text = row.text
                            if order_number in row_text:
                                order_row = row
                                logger.info(f"‚úÖ Found order {order_number} in row")
                                break
                        except:
                            continue
                    
                    if order_row:
                        break
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
                    if scroll_attempt < max_scroll_attempts - 1:
                        logger.info(f"üìú Order not found, scrolling down (attempt {scroll_attempt + 1})...")
                        self.driver.execute_script("window.scrollBy(0, 500);")
                        await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.debug(f"Error searching for order row: {e}")
                    continue
            
            if not order_row:
                raise BookingServiceError(f"–ó–∞–∫–∞–∑ {order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç–∞–≤–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            try:
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ
                status_elements = order_row.find_elements(By.CSS_SELECTOR, 
                    '[class*="badge"], [class*="Badge"], [class*="status"], [class*="Status"], [class*="tag"], [class*="Tag"]')
                
                status_found = False
                for status_elem in status_elements:
                    if status_elem.is_displayed():
                        status_text = status_elem.text.strip()
                        logger.info(f"üìä Found status: '{status_text}'")
                        
                        if any(keyword in status_text.lower() for keyword in ['–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω', '–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è']):
                            logger.info("‚úÖ Booking successful! Status changed to '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'")
                            return
                        status_found = True
                
                if not status_found:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–∞, –∏—â–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–µ
                    row_text = order_row.text
                    logger.info(f"üìã Row text: {row_text[:200]}...")
                    
                    if any(keyword in row_text.lower() for keyword in ['–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω', '–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è']):
                        logger.info("‚úÖ Booking successful! Found '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ' in row text")
                        return
                
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                logger.error(f"‚ùå Booking failed - status did not change to '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'")
                raise BookingServiceError(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_number} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'")
                
            except Exception as e:
                logger.error(f"Error checking order status: {e}")
                raise BookingServiceError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
                
        except BookingServiceError:
            raise
        except Exception as e:
            logger.error(f"Unexpected error in _check_booking_success: {e}")
            raise BookingServiceError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def __aenter__(self):
        """Async context manager entry"""
        await self._initialize_browser()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        await self._cleanup()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
_global_booking_service: Optional[BookingService] = None


def get_booking_service(auth_service: Optional[WBWebAuthService] = None) -> BookingService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global _global_booking_service
    if _global_booking_service is None:
        _global_booking_service = BookingService(auth_service)
    return _global_booking_service


async def cleanup_booking_service():
    """–û—á–∏—Å—Ç–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global _global_booking_service
    if _global_booking_service is not None:
        await _global_booking_service._cleanup()
        _global_booking_service = None