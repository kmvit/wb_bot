"""–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from aiogram import Bot
from loguru import logger

from app.config.settings import settings
from app.services.wildberries_api import wb_api, WildberriesAPIError
from app.services.booking_service import get_booking_service, BookingService, BookingServiceError
from app.database.database import AsyncSessionLocal
from app.database.repositories.user_repo import UserRepository
from app.database.repositories.slot_monitoring_repo import SlotMonitoringRepository
from app.database.models import SlotMonitoring, MonitoringStatus
from app.bot.handlers.keyboards import create_slot_notification_keyboard


class SlotMonitorService:
    """–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.is_running = False
        self.monitoring_tasks: Dict[int, asyncio.Task] = {}
        # –ö–µ—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (monitoring_id -> set of slot_keys)
        self.notified_slots_cache: Dict[int, set] = {}
        # –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Å–ª–æ—Ç–æ–≤ (monitoring_id -> best_slot)
        self.best_slots_cache: Dict[int, Dict[str, Any]] = {}
        # –ö–µ—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (monitoring_id -> attempt_count)
        self.booking_attempts_cache: Dict[int, int] = {}

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
        if self.is_running:
            logger.warning("Slot monitoring is already running")
            return

        self.is_running = True
        logger.info("Starting slot monitoring service...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        asyncio.create_task(self._monitoring_loop())

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        logger.info("Stopping slot monitoring service...")
        self.is_running = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        for task in self.monitoring_tasks.values():
            task.cancel()

        self.monitoring_tasks.clear()
        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –ª—É—á—à–∏—Ö —Å–ª–æ—Ç–æ–≤ –∏ –ø–æ–ø—ã—Ç–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.notified_slots_cache.clear()
        self.best_slots_cache.clear()
        self.booking_attempts_cache.clear()

    async def _stop_monitoring_for_user(self, monitoring_id: int):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            logger.info(f"üõë Stopping and deleting monitoring {monitoring_id} after successful booking")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∫ —É–¥–∞–ª—è–µ–º—ã–π –≤ –∫–µ—à–µ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
            self.booking_attempts_cache[monitoring_id] = -1  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if monitoring_id in self.monitoring_tasks:
                task = self.monitoring_tasks.pop(monitoring_id)
                task.cancel()
                logger.info(f"‚úÖ Stopped monitoring task for monitoring {monitoring_id}")
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if monitoring_id in self.notified_slots_cache:
                del self.notified_slots_cache[monitoring_id]
            if monitoring_id in self.best_slots_cache:
                del self.best_slots_cache[monitoring_id]
            if monitoring_id in self.booking_attempts_cache:
                del self.booking_attempts_cache[monitoring_id]
            logger.info(f"‚úÖ Cleared cache for monitoring {monitoring_id}")
            
            # –£–¥–∞–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            async with AsyncSessionLocal() as session:
                slot_repo = SlotMonitoringRepository(session)
                user_repo = UserRepository(session)
                
                # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id
                monitoring = await slot_repo.get_monitoring_by_id(monitoring_id)
                if monitoring:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    user = await user_repo.get_by_telegram_id(monitoring.user.telegram_id)
                    if user:
                        success = await slot_repo.delete_monitoring(monitoring_id, user)
                        if success:
                            logger.info(f"‚úÖ Successfully deleted monitoring {monitoring_id} from database")
                        else:
                            logger.error(f"‚ùå Failed to delete monitoring {monitoring_id} from database")
                    else:
                        logger.error(f"‚ùå User not found for monitoring {monitoring_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è Monitoring {monitoring_id} not found in database (may have been already deleted)")
                
        except Exception as e:
            logger.error(f"‚ùå Error stopping and deleting monitoring {monitoring_id}: {e}")

    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
                async with AsyncSessionLocal() as session:
                    slot_repo = SlotMonitoringRepository(session)
                    active_monitorings = await slot_repo.get_all_active_monitorings()

                # –ó–∞–ø—É—Å–∫–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                current_monitoring_ids = set(m.id for m in active_monitorings)
                running_task_ids = set(self.monitoring_tasks.keys())

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
                for task_id in running_task_ids - current_monitoring_ids:
                    task = self.monitoring_tasks.pop(task_id, None)
                    if task:
                        task.cancel()
                        # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                        if task_id in self.notified_slots_cache:
                            del self.notified_slots_cache[task_id]
                        if task_id in self.best_slots_cache:
                            del self.best_slots_cache[task_id]
                        logger.info(
                            f"Stopped monitoring task for monitoring {task_id}")

                # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                for monitoring in active_monitorings:
                    if monitoring.id not in self.monitoring_tasks:
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                        async with AsyncSessionLocal() as session:
                            slot_repo = SlotMonitoringRepository(session)
                            current_monitoring = await slot_repo.get_monitoring_by_id(monitoring.id)
                            
                            if current_monitoring and current_monitoring.status == MonitoringStatus.ACTIVE.value:
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è
                                if (monitoring.id not in self.booking_attempts_cache or 
                                    self.booking_attempts_cache.get(monitoring.id, 0) != -1):
                                    task = asyncio.create_task(
                                        self._monitor_slots_for_user(monitoring)
                                    )
                                    self.monitoring_tasks[monitoring.id] = task
                                    logger.info(
                                        f"Started monitoring task for monitoring {monitoring.id}")
                                else:
                                    logger.info(
                                        f"Monitoring {monitoring.id} is being deleted, skipping task creation")
                            else:
                                logger.info(
                                    f"Monitoring {monitoring.id} is no longer active, skipping task creation")

                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                logger.error(f"Error in monitoring loop: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _monitor_slots_for_user(self, monitoring: SlotMonitoring):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(
            f"Starting slot monitoring for user {monitoring.user.telegram_id}, monitoring {monitoring.id}")

        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                async with AsyncSessionLocal() as session:
                    slot_repo = SlotMonitoringRepository(session)
                    current_monitoring = await slot_repo.get_monitoring_by_id(monitoring.id)
                    
                    if not current_monitoring or current_monitoring.status != MonitoringStatus.ACTIVE.value:
                        logger.info(f"üõë Monitoring {monitoring.id} is no longer active, stopping task")
                        break
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                async with AsyncSessionLocal() as session:
                    user_repo = UserRepository(session)
                    user = await user_repo.get_by_telegram_id(monitoring.user.telegram_id)

                    if not user or not user.has_wb_token():
                        logger.warning(
                            f"User {monitoring.user.telegram_id} has no valid token")
                        break

                    wb_token = await user_repo.get_wb_token(user)
                    if not wb_token:
                        logger.warning(
                            f"Failed to decrypt token for user {monitoring.user.telegram_id}")
                        break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
                await self._check_slots_for_monitoring(monitoring, wb_token)

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                async with AsyncSessionLocal() as session:
                    slot_repo = SlotMonitoringRepository(session)
                    await slot_repo.update_last_check(monitoring.id)

                # –ñ–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(settings.SLOT_CHECK_INTERVAL)

            except asyncio.CancelledError:
                logger.info(
                    f"Monitoring task cancelled for monitoring {monitoring.id}")
                break
            except Exception as e:
                logger.error(
                    f"Error monitoring slots for monitoring {monitoring.id}: {e}")
                await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _check_slots_for_monitoring(self, monitoring: SlotMonitoring, wb_token: str):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            logger.debug(
                f"Checking slots for monitoring {monitoring.id}: warehouses={monitoring.warehouse_ids}")

            async with wb_api:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
                coefficients = await wb_api.get_acceptance_coefficients(
                    api_token=wb_token,
                    warehouse_ids=monitoring.warehouse_ids
                )

                logger.debug(
                    f"Received {len(coefficients)} coefficients for monitoring {monitoring.id}")

                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                suitable_slots = self._filter_suitable_coefficients(
                    coefficients, monitoring)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã –ø–æ —Å–∫–ª–∞–¥–∞–º
                if suitable_slots:
                    await self._process_slots_by_warehouse(monitoring, suitable_slots)

        except WildberriesAPIError as e:
            error_message = str(e)
            if "–ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" in error_message.lower() or "rate limit" in error_message.lower():
                logger.warning(
                    f"Rate limit hit for monitoring {monitoring.id}. Will retry after delay.")
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                await asyncio.sleep(120)  # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            else:
                logger.warning(
                    f"WB API error for monitoring {monitoring.id}: {e}")
        except Exception as e:
            logger.error(
                f"Error checking slots for monitoring {monitoring.id}: {e}")

    def _filter_suitable_coefficients(self, coefficients: List[Dict[str, Any]], monitoring: SlotMonitoring) -> List[Dict[str, Any]]:
        """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–µ–º–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        suitable_slots = []

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–µ—á–∞
        from datetime import datetime, timedelta
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–µ—Ä–∏–æ–¥ –≤—Ä—É—á–Ω—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º date_from –∫–∞–∫ –µ—Å—Ç—å (—É–∂–µ —Å –ø–ª–µ—á–æ–º)
        if monitoring.date_from:
            min_slot_date = monitoring.date_from.date()
            logger.debug(f"Using monitoring date_from (already with logistics shoulder): {min_slot_date}")
        else:
            # –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –æ—Ç –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ + –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ
            base_date = monitoring.created_at.date()
            min_slot_date = base_date + timedelta(days=monitoring.logistics_shoulder)
            logger.debug(f"Using monitoring created date + logistics shoulder: {base_date} + {monitoring.logistics_shoulder} days = {min_slot_date}")

        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        max_slot_date = None
        if monitoring.date_to:
            max_slot_date = monitoring.date_to.date()

        logger.debug(
            f"Filtering slots for monitoring {monitoring.id}: logistics_shoulder={monitoring.logistics_shoulder} days, min_slot_date={min_slot_date}, max_slot_date={max_slot_date}, selected_warehouses={monitoring.warehouse_ids}")

        for coeff_data in coefficients:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏
                coefficient = float(coeff_data.get('coefficient', -1))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (0-20)
                if coefficient < 0 or coefficient > 20:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
                if not coeff_data.get('allowUnload', False):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if not (monitoring.coefficient_min <= coefficient <= monitoring.coefficient_max):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–ª–∞–¥ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                warehouse_id = coeff_data.get('warehouseID')
                if warehouse_id not in monitoring.warehouse_ids:
                    logger.debug(
                        f"Skipping slot for warehouse {warehouse_id}: not in selected warehouses {monitoring.warehouse_ids}")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ - –¥–∞—Ç–∞ —Å–ª–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
                slot_date_str = coeff_data.get('date', '')
                if slot_date_str:
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞
                        if 'T' in slot_date_str:
                            slot_date = datetime.fromisoformat(
                                slot_date_str.replace('Z', '+00:00')).date()
                        else:
                            slot_date = datetime.strptime(
                                slot_date_str, '%Y-%m-%d').date()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Å–ª–æ—Ç–∞ –Ω–µ —Ä–∞–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–µ—á–∞
                        if slot_date < min_slot_date:
                            logger.debug(
                                f"Skipping slot {slot_date} for monitoring {monitoring.id}: too early (logistics shoulder: {monitoring.logistics_shoulder} days)")
                            continue

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Å–ª–æ—Ç–∞ –Ω–µ –ø–æ–∑–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                        if max_slot_date and slot_date > max_slot_date:
                            logger.debug(
                                f"Skipping slot {slot_date} for monitoring {monitoring.id}: too late (max date: {max_slot_date})")
                            continue

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                        failed_dates = monitoring.failed_booking_dates or []
                        slot_date_str_check = slot_date.strftime('%Y-%m-%d')
                        if slot_date_str_check in failed_dates:
                            logger.debug(
                                f"Skipping slot {slot_date} for monitoring {monitoring.id}: date in failed booking dates")
                            continue

                    except (ValueError, TypeError) as e:
                        logger.warning(
                            f"Error parsing slot date: {e}, date: {slot_date_str}")
                        continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
                if monitoring.box_type_id is not None:
                    slot_box_type_id = coeff_data.get('boxTypeID')
                    if slot_box_type_id != monitoring.box_type_id:
                        logger.debug(
                            f"Skipping slot for monitoring {monitoring.id}: box type mismatch (expected {monitoring.box_type_id}, got {slot_box_type_id})")
                        continue

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–ª–æ—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
                slot_data = {
                    'warehouseID': coeff_data.get('warehouseID'),
                    'warehouseName': coeff_data.get('warehouseName'),
                    'date': coeff_data.get('date'),
                    'coefficient': coefficient,
                    'boxTypeName': coeff_data.get('boxTypeName'),
                    'boxTypeID': coeff_data.get('boxTypeID'),
                    'allowUnload': coeff_data.get('allowUnload'),
                    'available': True  # –ï—Å–ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0 –∏–ª–∏ 1 –∏ allowUnload=true, —Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω
                }

                suitable_slots.append(slot_data)

            except (ValueError, TypeError) as e:
                logger.warning(
                    f"Error parsing coefficient data: {e}, data: {coeff_data}")
                continue

        return suitable_slots

    def _is_better_slot(self, new_slot: Dict[str, Any], current_best_slot: Dict[str, Any], monitoring: SlotMonitoring) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Å–ª–æ—Ç –ª—É—á—à–µ —Ç–µ–∫—É—â–µ–≥–æ –ª—É—á—à–µ–≥–æ"""
        if not current_best_slot:
            return True

        new_coefficient = float(new_slot.get('coefficient', 999))
        current_coefficient = float(current_best_slot.get('coefficient', 999))

        # –°–Ω–∞—á–∞–ª–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        if new_coefficient < current_coefficient:
            return True
        elif new_coefficient > current_coefficient:
            return False

        # –ï—Å–ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∞–≤–Ω—ã, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –¥–∞—Ç–µ (—á–µ–º –±–ª–∏–∂–µ –∫ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, —Ç–µ–º –ª—É—á—à–µ)
        try:
            new_date_str = new_slot.get('date', '')
            current_date_str = current_best_slot.get('date', '')

            if 'T' in new_date_str:
                new_date = datetime.fromisoformat(
                    new_date_str.replace('Z', '+00:00')).date()
            else:
                new_date = datetime.strptime(new_date_str, '%Y-%m-%d').date()

            if 'T' in current_date_str:
                current_date = datetime.fromisoformat(
                    current_date_str.replace('Z', '+00:00')).date()
            else:
                current_date = datetime.strptime(
                    current_date_str, '%Y-%m-%d').date()

            # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            if monitoring.date_from:
                monitoring_start_date = monitoring.date_from.date()
            else:
                monitoring_start_date = monitoring.created_at.date() + timedelta(days=monitoring.logistics_shoulder)

            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            new_distance = abs((new_date - monitoring_start_date).days)
            current_distance = abs((current_date - monitoring_start_date).days)

            # –ß–µ–º –º–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ
            return new_distance < current_distance

        except (ValueError, TypeError) as e:
            logger.warning(f"Error comparing slot dates: {e}")
            return False

    async def _process_slots_by_warehouse(self, monitoring: SlotMonitoring, slots: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–æ—Ç—ã, –≥—Ä—É–ø–ø–∏—Ä—É—è –∏—Ö –ø–æ —Å–∫–ª–∞–¥–∞–º"""
        if not slots:
            return

        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ —Å–∫–ª–∞–¥–∞–º
            warehouse_slots = {}
            for slot in slots:
                warehouse_id = slot.get('warehouseID')
                if warehouse_id not in warehouse_slots:
                    warehouse_slots[warehouse_id] = []
                warehouse_slots[warehouse_id].append(slot)

            logger.debug(
                f"Processing slots for monitoring {monitoring.id}: found slots for {len(warehouse_slots)} warehouses")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∫–ª–∞–¥ –æ—Ç–¥–µ–ª—å–Ω–æ
            for warehouse_id, warehouse_slot_list in warehouse_slots.items():
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Å–ª–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞
                best_slot_for_warehouse = None
                for slot in warehouse_slot_list:
                    if self._is_better_slot(slot, best_slot_for_warehouse, monitoring):
                        best_slot_for_warehouse = slot

                if best_slot_for_warehouse:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞
                    cache_key = f"{monitoring.id}_{warehouse_id}"
                    current_best = self.best_slots_cache.get(cache_key)

                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–æ—Ç –ª—É—á—à–µ —Ç–µ–∫—É—â–µ–≥–æ –ª—É—á—à–µ–≥–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞
                    if self._is_better_slot(best_slot_for_warehouse, current_best, monitoring):
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞
                        self.best_slots_cache[cache_key] = best_slot_for_warehouse

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await self._send_slot_notification(
                            monitoring=monitoring,
                            warehouse_id=best_slot_for_warehouse.get(
                                'warehouseID'),
                            warehouse_name=best_slot_for_warehouse.get(
                                'warehouseName', f'–°–∫–ª–∞–¥ {best_slot_for_warehouse.get("warehouseID")}'),
                            slot_date=datetime.fromisoformat(best_slot_for_warehouse.get('date', '').replace(
                                'Z', '+00:00')) if 'T' in best_slot_for_warehouse.get('date', '') else datetime.strptime(best_slot_for_warehouse.get('date', ''), '%Y-%m-%d'),
                            coefficient=float(
                                best_slot_for_warehouse.get('coefficient', 0)),
                            slot_info=best_slot_for_warehouse
                        )

                        logger.info(
                            f"Sent notification for warehouse {warehouse_id} (monitoring {monitoring.id}): date {best_slot_for_warehouse.get('date')}, coefficient {best_slot_for_warehouse.get('coefficient')}")
                    else:
                        logger.debug(
                            f"No better slot found for warehouse {warehouse_id} (monitoring {monitoring.id})")

        except Exception as e:
            logger.error(
                f"Error processing slots by warehouse for monitoring {monitoring.id}: {e}")

    async def _process_best_slot(self, monitoring: SlotMonitoring, slots: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∏ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–π"""
        if not slots:
            return

        try:
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Å–ª–æ—Ç —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
            best_slot = None
            for slot in slots:
                if self._is_better_slot(slot, best_slot, monitoring):
                    best_slot = slot

            if not best_slot:
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª—É—á—à–∏–π —Å–ª–æ—Ç –∏–∑ –∫—ç—à–∞
            current_best = self.best_slots_cache.get(monitoring.id)

            logger.debug(
                f"Processing best slot for monitoring {monitoring.id}:")
            logger.debug(
                f"  Found slot: {best_slot.get('date')} | {best_slot.get('coefficient')} | {best_slot.get('warehouseName')}")
            logger.debug(
                f"  Current best: {current_best.get('date') if current_best else 'None'} | {current_best.get('coefficient') if current_best else 'None'} | {current_best.get('warehouseName') if current_best else 'None'}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–ª–æ—Ç –ª—É—á—à–µ —Ç–µ–∫—É—â–µ–≥–æ –ª—É—á—à–µ–≥–æ
            if self._is_better_slot(best_slot, current_best, monitoring):
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ª—É—á—à–µ–≥–æ —Å–ª–æ—Ç–∞
                self.best_slots_cache[monitoring.id] = best_slot

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª—É—á—à–µ–º —Å–ª–æ—Ç–µ
                await self._send_slot_notification(
                    monitoring=monitoring,
                    warehouse_id=best_slot.get('warehouseID'),
                    warehouse_name=best_slot.get(
                        'warehouseName', f'–°–∫–ª–∞–¥ {best_slot.get("warehouseID")}'),
                    slot_date=datetime.fromisoformat(best_slot.get('date', '').replace(
                        'Z', '+00:00')) if 'T' in best_slot.get('date', '') else datetime.strptime(best_slot.get('date', ''), '%Y-%m-%d'),
                    coefficient=float(best_slot.get('coefficient', 0)),
                    slot_info=best_slot
                )

                logger.info(
                    f"Sent notification for new best slot (monitoring {monitoring.id}): warehouse {best_slot.get('warehouseID')}, date {best_slot.get('date')}, coefficient {best_slot.get('coefficient')}")
            else:
                logger.debug(
                    f"No better slot found for monitoring {monitoring.id}")

        except Exception as e:
            logger.error(
                f"Error processing best slot for monitoring {monitoring.id}: {e}")

    async def _process_found_slots(self, monitoring: SlotMonitoring, warehouse_id: int, slots: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not slots:
            return

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if monitoring.id not in self.notified_slots_cache:
                self.notified_slots_cache[monitoring.id] = set()

            notified_cache = self.notified_slots_cache[monitoring.id]

            for slot in slots:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–∏–µ–º–∫–∏
                slot_date_str = slot.get('date', '')
                if not slot_date_str:
                    continue

                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞
                    if 'T' in slot_date_str:
                        slot_date = datetime.fromisoformat(
                            slot_date_str.replace('Z', '+00:00'))
                    else:
                        slot_date = datetime.strptime(
                            slot_date_str, '%Y-%m-%d')
                except (ValueError, TypeError):
                    logger.warning(f"Invalid date format: {slot_date_str}")
                    continue

                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å–ª–æ—Ç–∞ –¥–ª—è –∫–µ—à–∞
                slot_coefficient = float(slot.get('coefficient', 0))
                slot_key = f"{warehouse_id}_{slot_date.date()}_{slot_coefficient}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º —Å–ª–æ—Ç–µ
                if slot_key not in notified_cache:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await self._send_slot_notification(
                        monitoring=monitoring,
                        warehouse_id=warehouse_id,
                        warehouse_name=slot.get(
                            'warehouseName', f'–°–∫–ª–∞–¥ {warehouse_id}'),
                        slot_date=slot_date,
                        coefficient=slot_coefficient,
                        slot_info=slot
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    notified_cache.add(slot_key)

                    logger.info(
                        f"Sent notification for new slot (monitoring {monitoring.id}): {slot_key}")
                else:
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    logger.debug(
                        f"Notification already sent for slot (monitoring {monitoring.id}): {slot_key}")

        except Exception as e:
            logger.error(
                f"Error processing found slots for monitoring {monitoring.id}: {e}")

    async def _send_slot_notification(
        self,
        monitoring: SlotMonitoring,
        warehouse_id: int,
        warehouse_name: str,
        slot_date: datetime,
        coefficient: float,
        slot_info: Dict[str, Any]
    ):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            coeff_text = "üü¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞" if coefficient == 0 else "üü° –ü–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —É–ø–∞–∫–æ–≤–∫–∏
            box_type_name = slot_info.get('boxTypeName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            box_type_id = slot_info.get('boxTypeID', 'N/A')

            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            initial_notification_text = f"""
ü§ñ <b>–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç! –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...</b>

<b>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring.id}</b>
üè™ <b>–°–∫–ª–∞–¥:</b> {warehouse_name} (ID: {warehouse_id})
üìÖ <b>–î–∞—Ç–∞:</b> {slot_date.strftime('%d.%m.%Y')}
üí∞ <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {coefficient} ({coeff_text})
üì¶ <b>–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏:</b> {box_type_name} (ID: {box_type_id})

‚è≥ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—Ä–æ–Ω–∏—Ä—É—é —Å–ª–æ—Ç...</b>
        """

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            initial_message = await self.bot.send_message(
                chat_id=monitoring.user.telegram_id,
                text=initial_notification_text,
                parse_mode="HTML"
            )

            logger.info(f"Found suitable slot for monitoring {monitoring.id}, starting auto-booking...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with AsyncSessionLocal() as session:
                user_repo = UserRepository(session)
                session_data = await user_repo.get_phone_auth_session(monitoring.user)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
            if not session_data:
                error_text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>

<b>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring.id}</b>
üè™ <b>–°–∫–ª–∞–¥:</b> {warehouse_name} (ID: {warehouse_id})
üìÖ <b>–î–∞—Ç–∞:</b> {slot_date.strftime('%d.%m.%Y')}

<b>üí¨ –ü—Ä–∏—á–∏–Ω–∞:</b> –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç–µ Wildberries.

<a href="https://t.me/{self.bot.username}?start=auth">üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</a>
                """
                
                await initial_message.edit_text(
                    text=error_text,
                    parse_mode="HTML",
                    reply_markup=create_slot_notification_keyboard(monitoring.id)
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
            if not monitoring.order_number:
                error_text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>

<b>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring.id}</b>
üè™ <b>–°–∫–ª–∞–¥:</b> {warehouse_name} (ID: {warehouse_id})
üìÖ <b>–î–∞—Ç–∞:</b> {slot_date.strftime('%d.%m.%Y')}

<b>üí¨ –ü—Ä–∏—á–∏–Ω–∞:</b> –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ.
                """
                
                await initial_message.edit_text(
                    text=error_text,
                    parse_mode="HTML",
                    reply_markup=create_slot_notification_keyboard(monitoring.id)
                )
                return

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            await self._attempt_booking_with_retry(
                monitoring=monitoring,
                session_data=session_data,
                slot_date=slot_date,
                warehouse_id=warehouse_id,
                warehouse_name=warehouse_name,
                coefficient=coefficient,
                coeff_text=coeff_text,
                initial_message=initial_message
            )

        except Exception as e:
            logger.error(f"Error in auto-booking notification: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await self.bot.send_message(
                    chat_id=monitoring.user.telegram_id,
                    text=f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\nüí¨ {str(e).replace('<', '&lt;').replace('>', '&gt;')}",
                    parse_mode="HTML"
                )
            except:
                pass

    async def _attempt_booking_with_retry(
        self,
        monitoring: SlotMonitoring,
        session_data: Dict[str, Any],
        slot_date: datetime,
        warehouse_id: int,
        warehouse_name: str,
        coefficient: float,
        coeff_text: str,
        initial_message
    ):
        """–ü–æ–ø—ã—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        max_attempts = 3
        attempt = self.booking_attempts_cache.get(monitoring.id, 0) + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        self.booking_attempts_cache[monitoring.id] = attempt
        
        logger.info(f"üîÑ Booking attempt {attempt}/{max_attempts} for monitoring {monitoring.id}")
        
        try:
            from app.services.wb_web_auth import get_wb_auth_service
            from app.services.booking_service import BookingService, BookingServiceError
            
            auth_service = get_wb_auth_service(user_id=monitoring.user.telegram_id)
            booking_service = BookingService(auth_service)
            
            success, message = await booking_service.book_slot(
                session_data=session_data,
                order_number=monitoring.order_number,
                target_date=slot_date,
                target_warehouse_id=warehouse_id
            )
            
            if success:
                # –£—Å–ø–µ—à–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                success_text = f"""
‚úÖ <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!</b>

<b>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring.id}</b>
üè™ <b>–°–∫–ª–∞–¥:</b> {warehouse_name} (ID: {warehouse_id})
üìÖ <b>–î–∞—Ç–∞:</b> {slot_date.strftime('%d.%m.%Y')}
üì¶ <b>–ó–∞–∫–∞–∑:</b> {monitoring.order_number}
üí∞ <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {coefficient} ({coeff_text})

<b>üí¨ {message}</b>

üéâ <b>–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!</b>
                """
                
                await initial_message.edit_text(
                    text=success_text,
                    parse_mode="HTML",
                    reply_markup=create_slot_notification_keyboard(monitoring.id)
                )
                
                logger.info(f"Successfully auto-booked slot for monitoring {monitoring.id} on attempt {attempt}")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
                await self._stop_monitoring_for_user(monitoring.id)
                return
                
            else:
                # –ù–µ—É—Å–ø–µ—à–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                error_text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>

<b>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring.id}</b>
üè™ <b>–°–∫–ª–∞–¥:</b> {warehouse_name} (ID: {warehouse_id})
üìÖ <b>–î–∞—Ç–∞:</b> {slot_date.strftime('%d.%m.%Y')}
üì¶ <b>–ó–∞–∫–∞–∑:</b> {monitoring.order_number}

<b>üí¨ {message}</b>

üîÑ <b>–ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫...</b>
                """
                
                await initial_message.edit_text(
                    text=error_text,
                    parse_mode="HTML",
                    reply_markup=create_slot_notification_keyboard(monitoring.id)
                )
                
                logger.info(f"Auto-booking failed for monitoring {monitoring.id}, continuing search...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                await self._add_failed_booking_date(monitoring.id, slot_date)
                
                # –û—á–∏—â–∞–µ–º –∫–µ—à –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                self._clear_slot_cache(monitoring.id, warehouse_id, slot_date, coefficient)
                return
                
        except BookingServiceError as e:
            error_message = str(e)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π stale element reference
            is_stale_error = "stale element reference" in error_message.lower()
            is_retryable_error = any(keyword in error_message.lower() for keyword in [
                "stale element reference",
                "timeout",
                "element not found",
                "element not clickable"
            ])
            
            if is_retryable_error and attempt < max_attempts:
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                logger.warning(f"üîÑ Retryable error on attempt {attempt}: {error_message}")
                
                retry_text = f"""
üîÑ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>

<b>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring.id}</b>
üè™ <b>–°–∫–ª–∞–¥:</b> {warehouse_name} (ID: {warehouse_id})
üìÖ <b>–î–∞—Ç–∞:</b> {slot_date.strftime('%d.%m.%Y')}
üì¶ <b>–ó–∞–∫–∞–∑:</b> {monitoring.order_number}

<b>üí¨ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}</b>
‚è≥ <b>–ü–æ–≤—Ç–æ—Ä—è—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</b>
                """
                
                await initial_message.edit_text(
                    text=retry_text,
                    parse_mode="HTML",
                    reply_markup=create_slot_notification_keyboard(monitoring.id)
                )
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(3)
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–Ω–æ–≤–∞
                await self._attempt_booking_with_retry(
                    monitoring=monitoring,
                    session_data=session_data,
                    slot_date=slot_date,
                    warehouse_id=warehouse_id,
                    warehouse_name=warehouse_name,
                    coefficient=coefficient,
                    coeff_text=coeff_text,
                    initial_message=initial_message
                )
                return
                
            else:
                # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º - –ª–∏–±–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ª–∏–±–æ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏
                if attempt >= max_attempts:
                    logger.error(f"‚ùå Max attempts ({max_attempts}) reached for monitoring {monitoring.id}")
                    error_text = f"""
‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫</b>

<b>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring.id}</b>
üè™ <b>–°–∫–ª–∞–¥:</b> {warehouse_name} (ID: {warehouse_id})
üìÖ <b>–î–∞—Ç–∞:</b> {slot_date.strftime('%d.%m.%Y')}
üì¶ <b>–ó–∞–∫–∞–∑:</b> {monitoring.order_number}

<b>üí¨ –ü–æ–ø—ã—Ç–æ–∫: {attempt}/{max_attempts}</b>
<b>üí¨ –û—à–∏–±–∫–∞: {error_message.replace('<', '&lt;').replace('>', '&gt;')}</b>

üîÑ <b>–ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫...</b>
                    """
                else:
                    error_text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>

<b>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring.id}</b>
üè™ <b>–°–∫–ª–∞–¥:</b> {warehouse_name} (ID: {warehouse_id})
üìÖ <b>–î–∞—Ç–∞:</b> {slot_date.strftime('%d.%m.%Y')}
üì¶ <b>–ó–∞–∫–∞–∑:</b> {monitoring.order_number}

<b>üí¨ {error_message.replace('<', '&lt;').replace('>', '&gt;')}</b>

üîÑ <b>–ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫...</b>
                    """
                
                await initial_message.edit_text(
                    text=error_text,
                    parse_mode="HTML",
                    reply_markup=create_slot_notification_keyboard(monitoring.id)
                )
                
                logger.info(f"BookingServiceError for monitoring {monitoring.id}, continuing search...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                await self._add_failed_booking_date(monitoring.id, slot_date)
                
                # –û—á–∏—â–∞–µ–º –∫–µ—à –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                self._clear_slot_cache(monitoring.id, warehouse_id, slot_date, coefficient)
                return
                
        except Exception as e:
            logger.error(f"Unexpected error during auto-booking for monitoring {monitoring.id}: {e}")
            error_text = f"""
‚ùå <b>–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>

<b>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #{monitoring.id}</b>
üè™ <b>–°–∫–ª–∞–¥:</b> {warehouse_name} (ID: {warehouse_id})
üìÖ <b>–î–∞—Ç–∞:</b> {slot_date.strftime('%d.%m.%Y')}
üì¶ <b>–ó–∞–∫–∞–∑:</b> {monitoring.order_number}

<b>üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</b>

üîÑ <b>–ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫...</b>
            """
            
            await initial_message.edit_text(
                text=error_text,
                parse_mode="HTML",
                reply_markup=create_slot_notification_keyboard(monitoring.id)
            )
            
            logger.info(f"Unexpected error for monitoring {monitoring.id}, continuing search...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await self._add_failed_booking_date(monitoring.id, slot_date)
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            self._clear_slot_cache(monitoring.id, warehouse_id, slot_date, coefficient)
            return
    
    def _clear_slot_cache(self, monitoring_id: int, warehouse_id: int, slot_date: datetime, coefficient: float):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
        # –û—á–∏—â–∞–µ–º –∫–µ—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
        slot_key = f"{warehouse_id}_{slot_date.strftime('%Y-%m-%d')}_{coefficient}"
        if monitoring_id in self.notified_slots_cache:
            self.notified_slots_cache[monitoring_id].discard(slot_key)
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à –ª—É—á—à–∏—Ö —Å–ª–æ—Ç–æ–≤
        if monitoring_id in self.best_slots_cache:
            del self.best_slots_cache[monitoring_id]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        if monitoring_id in self.booking_attempts_cache:
            del self.booking_attempts_cache[monitoring_id]
        
        logger.info(f"Cleared cache for monitoring {monitoring_id} to search for better slots")

    def clear_monitoring_cache(self, monitoring_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ª—É—á—à–∏—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        keys_to_remove = []
        for key in self.best_slots_cache.keys():
            if key.startswith(f"{monitoring_id}_") or key == str(monitoring_id):
                keys_to_remove.append(key)

        for key in keys_to_remove:
            del self.best_slots_cache[key]
            logger.info(
                f"Cleared best slots cache for monitoring {monitoring_id} (key: {key})")

        if monitoring_id in self.notified_slots_cache:
            del self.notified_slots_cache[monitoring_id]
            logger.info(
                f"Cleared notified slots cache for monitoring {monitoring_id}")
        
        if monitoring_id in self.booking_attempts_cache:
            del self.booking_attempts_cache[monitoring_id]
            logger.info(
                f"Cleared booking attempts cache for monitoring {monitoring_id}")

    async def _add_failed_booking_date(self, monitoring_id: int, failed_date: datetime):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            from app.database.database import AsyncSessionLocal
            from app.database.repositories.slot_monitoring_repo import SlotMonitoringRepository
            
            async with AsyncSessionLocal() as session:
                slot_repo = SlotMonitoringRepository(session)
                success = await slot_repo.add_failed_booking_date(monitoring_id, failed_date)
                
                if success:
                    logger.info(f"Added failed booking date {failed_date.date()} for monitoring {monitoring_id}")
                else:
                    logger.error(f"Failed to add failed booking date for monitoring {monitoring_id}")
                    
        except Exception as e:
            logger.error(f"Error adding failed booking date for monitoring {monitoring_id}: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
slot_monitor_service: Optional[SlotMonitorService] = None


def get_slot_monitor_service(bot: Bot) -> SlotMonitorService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global slot_monitor_service
    if slot_monitor_service is None:
        slot_monitor_service = SlotMonitorService(bot)
    return slot_monitor_service
