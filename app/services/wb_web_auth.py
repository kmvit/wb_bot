"""–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Wildberries"""

import asyncio
import json
from pathlib import Path
from typing import Dict, Optional, Tuple
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from loguru import logger

from app.config.settings import settings
from app.utils.browser_config import create_undetectable_chrome_options, setup_undetectable_chrome


class WBWebAuthError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ –≤–µ–±-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    pass


class WBWebAuthService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Wildberries"""
    
    def __init__(self, user_id: Optional[int] = None):
        self.driver: Optional[webdriver.Chrome] = None
        self.wait: Optional[WebDriverWait] = None
        self._phone_number: Optional[str] = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞
        self.user_id = user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
        self._profile_dir = self._resolve_profile_dir()

    def _resolve_profile_dir(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å (–∏ —Å–æ–∑–¥–∞—Ç—å) –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        base_dir = Path(settings.WB_BROWSER_PROFILES_DIR).expanduser().resolve()
        try:
            base_dir.mkdir(parents=True, exist_ok=True)
        except Exception as exc:
            logger.warning(f"Could not create base browser profile dir {base_dir}: {exc}")
            raise

        profile_path = base_dir / f"wb_bot_user_{self.user_id or 'shared'}"
        profile_path.mkdir(parents=True, exist_ok=True)
        return str(profile_path)
    
    async def _ensure_browser_ready(self):
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"""
        if not self.driver:
            logger.info("Browser not ready, initializing...")
            await self._initialize_browser()
    
    async def _initialize_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä"""
        try:
            if self.driver:
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏
            options = create_undetectable_chrome_options(profile_dir=self._profile_dir)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥ root
            from selenium.webdriver.chrome.service import Service
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                self.driver = webdriver.Chrome(options=options)
                logger.info("Browser started successfully with default Chrome")
            except Exception as e:
                logger.warning(f"Could not start Chrome with default method: {e}")
                try:
                    # –ü—Ä–æ–±—É–µ–º —É–∫–∞–∑–∞—Ç—å —è–≤–Ω–æ –ø—É—Ç—å –∫ chromium –¥–ª—è Linux-—Å–∏—Å—Ç–µ–º
                    options.binary_location = "/usr/bin/chromium"
                    self.driver = webdriver.Chrome(options=options)
                    logger.info("Browser started using explicit chromium path")
                except Exception as e2:
                    logger.error(f"Failed to start Chrome with explicit path: {e2}")
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å chromium-browser
                    try:
                        options.binary_location = "/usr/bin/chromium-browser"
                        self.driver = webdriver.Chrome(options=options)
                        logger.info("Browser started using chromium-browser path")
                    except Exception as e3:
                        logger.error(f"All browser initialization methods failed: {e3}")
                        raise
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            self.wait = WebDriverWait(self.driver, 15)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏
            setup_undetectable_chrome(self.driver)
            
            logger.info("Browser initialized successfully")
            
        except Exception as e:
            logger.error(f"Error initializing browser: {e}")
            await self._cleanup()
            raise
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if self.driver:
                self.driver.quit()
        except:
            pass
        
        self.driver = None
        self.wait = None
        self._phone_number = None
    
    async def start_session(self):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä)"""
        await self._initialize_browser()
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é (–∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä)"""
        await self._cleanup()
    
    def _log_network_requests(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            logs = self.driver.get_log('performance')
            for log in logs:
                message = json.loads(log['message'])
                if message['message']['method'] == 'Network.responseReceived':
                    response = message['message']['params']['response']
                    url = response['url']
                    status = response['status']
                    method = response.get('method', 'GET')
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã –∫ Wildberries
                    if 'wildberries.ru' in url:
                        if status == 200:
                            logger.info(f"üåê {method} {url} ‚Üí {status}")
                        else:
                            logger.warning(f"üåê {method} {url} ‚Üí {status}")
        except Exception as e:
            logger.debug(f"Could not log network requests: {e}")
        
    async def __aenter__(self):
        """Async context manager entry"""
        await self._initialize_browser()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        await self._cleanup()
    
    async def request_sms_code(self, phone_number: str) -> bool:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å SMS –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            logger.info(f"Requesting SMS code for phone: {phone_number}")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤
            await self._ensure_browser_ready()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            logger.info("üåê Navigating to: https://seller-auth.wildberries.ru/ru/")
            self.driver.get("https://seller-auth.wildberries.ru/ru/")
            await asyncio.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            self._log_network_requests()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try:
                self.driver.save_screenshot("debug_phone_page.png")
                logger.info("Screenshot saved: debug_phone_page.png")
            except:
                pass
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            try:
                phone_input = self.wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'input[data-testid="phone-input"]'))
                )
                logger.info("Phone input field found")
            except TimeoutException:
                logger.error("Phone input not found with primary selector")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                alternative_selectors = [
                    'input[type="text"]',
                    'input[placeholder*="999"]',
                    'input[inputmode="numeric"]'
                ]
                
                phone_input = None
                for selector in alternative_selectors:
                    try:
                        phone_input = self.driver.find_element(By.CSS_SELECTOR, selector)
                        if phone_input:
                            logger.info(f"Found phone input with selector: {selector}")
                            break
                    except:
                        continue
                
                if not phone_input:
                    raise WBWebAuthError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ +7)
            phone_input.click()  # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–æ–ª–µ
            await asyncio.sleep(0.5)
            phone_input.clear()  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            await asyncio.sleep(0.5)
            
            # –£–±–∏—Ä–∞–µ–º +7 –∏–∑ –Ω–æ–º–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω
            phone_digits = phone_number[2:] if phone_number.startswith('+7') else phone_number
            
            # –í–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –ø–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–µ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            for digit in phone_digits:
                phone_input.send_keys(digit)
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
            
            await asyncio.sleep(1)
            
            # –ñ–¥–µ–º, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π
            await asyncio.sleep(1)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            submit_selectors = [
                'button[data-testid="submit-phone-button"]',
                'button[type="submit"]'
            ]
            
            submit_button = None
            for selector in submit_selectors:
                try:
                    submit_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if submit_button:
                        # –ñ–¥–µ–º, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π (–º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥)
                        for _ in range(10):  # 10 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 0.5 —Å–µ–∫—É–Ω–¥—ã
                            is_disabled = submit_button.get_attribute('disabled')
                            if not is_disabled:
                                logger.info(f"Found active submit button with selector: {selector}")
                                break
                            await asyncio.sleep(0.5)
                        else:
                            logger.info(f"Submit button still disabled: {selector}")
                            submit_button = None
                        
                        if submit_button:
                            break
                except:
                    continue
            
            if not submit_button:
                raise WBWebAuthError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–∞")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
            try:
                # –ù–∞–≤–æ–¥–∏–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É
                from selenium.webdriver.common.action_chains import ActionChains
                ActionChains(self.driver).move_to_element(submit_button).perform()
                await asyncio.sleep(0.5)
                
                # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
                submit_button.click()
                logger.info("Submit button clicked, waiting for SMS code form...")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                await asyncio.sleep(2)
                self._log_network_requests()
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (–¥–æ 10 —Å–µ–∫—É–Ω–¥)
                try:
                    # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Å –ø–æ–ª—è–º–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                    self.wait.until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, 'form.CodeInputContentView__form-mgPTHveibl'))
                    )
                    logger.info("SMS code form appeared")
                except TimeoutException:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ñ–æ—Ä–º—ã
                    try:
                        self.wait.until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, 'ul.SimpleCodeInput-016VPGuQ+E'))
                        )
                        logger.info("SMS code input list appeared")
                    except TimeoutException:
                        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                        self.wait.until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, 'input[data-testid="sms-code-input"]'))
                        )
                        logger.info("SMS code input field appeared")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                await asyncio.sleep(2)
                    
            except Exception as e:
                if "Timeout" in str(e):
                    raise WBWebAuthError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞ –∫–æ–¥–∞")
                raise
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∫–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤–∏–ª–∞—Å—å
            code_inputs = self.driver.find_elements(By.CSS_SELECTOR, 'input[data-testid="sms-code-input"]')
            if not code_inputs:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –æ—à–∏–±–∫–∞
                error_elements = self.driver.find_elements(By.CSS_SELECTOR, '.error, .alert, [class*="error"]')
                if error_elements:
                    error_text = error_elements[0].text
                    raise WBWebAuthError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ SMS: {error_text}")
                
                raise WBWebAuthError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ verify_sms_code
            self._phone_number = phone_number
            
            logger.info(f"SMS code requested successfully for phone: {phone_number}")
            return True
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"Error requesting SMS code: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if "WebDriverException" in error_msg or "browser has been closed" in error_msg:
                raise WBWebAuthError("–ë—Ä–∞—É–∑–µ—Ä –±—ã–ª –∑–∞–∫—Ä—ã—Ç –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            elif "Timeout" in error_msg:
                raise WBWebAuthError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                raise WBWebAuthError(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ SMS –∫–æ–¥–∞: {error_msg}")
    
    async def verify_sms_code(self, sms_code: str) -> Tuple[bool, Optional[Dict]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å SMS –∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        try:
            logger.info("Verifying SMS code...")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤
            await self._ensure_browser_ready()
            
            # –ò—â–µ–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
            code_inputs = self.driver.find_elements(By.CSS_SELECTOR, 'input[data-testid="sms-code-input"]')
            
            if not code_inputs:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                code_selectors = [
                    'input[type="text"]',
                    'input[name="code"]',
                    'input[placeholder*="–∫–æ–¥"]',
                    'input[placeholder*="code"]'
                ]
                
                for selector in code_selectors:
                    code_inputs = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if code_inputs:
                        break
            
            if not code_inputs:
                raise WBWebAuthError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞")
            
            # –í–≤–æ–¥–∏–º SMS –∫–æ–¥ (6 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)
            logger.info(f"Found {len(code_inputs)} code input fields")
            
            if len(code_inputs) >= len(sms_code):
                for i, digit in enumerate(sms_code):
                    if i < len(code_inputs):
                        code_inputs[i].clear()  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
                        code_inputs[i].send_keys(digit)
                        await asyncio.sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–≤–æ–¥–∞–º–∏
                        logger.info(f"Entered digit {digit} in field {i+1}")
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –ø—Ä–æ–±—É–µ–º –≤–≤–µ—Å—Ç–∏ –≤ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
                code_inputs[0].clear()  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
                code_inputs[0].send_keys(sms_code)
                logger.info(f"Entered full code {sms_code} in single field")
            
            await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
            submit_button = None
            submit_selectors = [
                'button[type="submit"]',
                '.submit-button',
                '[data-testid="submit-button"]'
            ]
            
            for selector in submit_selectors:
                try:
                    submit_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if submit_button:
                        logger.info(f"Found submit button: {selector}")
                        break
                except:
                    continue
            
            if submit_button:
                # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                submit_button.click()
                logger.info("Submit button clicked")
                await asyncio.sleep(3)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–∞
                self._log_network_requests()
            else:
                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                logger.info("No submit button found, waiting for automatic submission...")
                await asyncio.sleep(3)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                self._log_network_requests()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –æ—à–∏–±–∫–∞
            error_elements = self.driver.find_elements(By.CSS_SELECTOR, '.error, .alert, [class*="error"]')
            if error_elements:
                error_text = error_elements[0].text
                if error_text and "–Ω–µ–≤–µ—Ä–Ω—ã–π" in error_text.lower():
                    raise WBWebAuthError("–ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥")
                elif error_text:
                    raise WBWebAuthError(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_text}")
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            try:
                # –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–±–∏–Ω–µ—Ç–∞
                self.wait.until(
                    lambda driver: 'seller.wildberries.ru' in driver.current_url
                )
            except TimeoutException:
                # –ï—Å–ª–∏ –Ω–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –ø–µ—Ä–µ—Ö–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
                current_url = self.driver.current_url
                if not current_url or 'seller.wildberries.ru' not in current_url:
                    raise WBWebAuthError("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç")
            
            # –ü–æ–ª—É—á–∞–µ–º cookies –∏ session data
            cookies = self.driver.get_cookies()
            session_data = {
                'cookies': cookies,
                'local_storage': self.driver.execute_script('return { ...localStorage }'),
                'session_storage': self.driver.execute_script('return { ...sessionStorage }'),
                'user_agent': self.driver.execute_script('return navigator.userAgent')
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –ò–ù–ù –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞
            inn_value = None
            seller_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            try:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
                logger.info("üåê Navigating to: https://seller.wildberries.ru/supplier-settings/supplier-card")
                self.driver.get("https://seller.wildberries.ru/supplier-settings/supplier-card")
                await asyncio.sleep(2)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                self._log_network_requests()
                
                # –ò—â–µ–º –ø–æ–ª–µ —Å –ò–ù–ù
                inn_selectors = [
                    '#taxpayerCode',
                    'input[name="taxpayerCode"]',
                    '[data-testid="taxpayer-code"]'
                ]
                
                for selector in inn_selectors:
                    try:
                        inn_element = self.driver.find_element(By.CSS_SELECTOR, selector)
                        if inn_element:
                            inn_value = inn_element.get_attribute('value')
                            if inn_value and len(inn_value) >= 10:  # –ò–ù–ù –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º
                                break
                    except:
                        continue
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ input, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                if not inn_value:
                    inn_text_elements = self.driver.find_elements(By.CSS_SELECTOR, '*')
                    for element in inn_text_elements:
                        try:
                            text = element.text
                            if text and len(text) >= 10 and text.isdigit():
                                inn_value = text
                                break
                        except:
                            continue
                
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
                seller_selectors = [
                    '[data-testid="seller-name"]',
                    '.seller-name',
                    'h1',
                    'h2',
                    '.company-name'
                ]
                
                for selector in seller_selectors:
                    try:
                        seller_element = self.driver.find_element(By.CSS_SELECTOR, selector)
                        if seller_element:
                            seller_name = seller_element.text
                            if seller_name and len(seller_name.strip()) > 0:
                                seller_name = seller_name.strip()
                                break
                    except:
                        continue
                        
            except Exception as e:
                logger.warning(f"Could not get INN and seller name: {e}")
            
            auth_data = {
                'session_data': session_data,
                'inn': inn_value or "–ù–µ –Ω–∞–π–¥–µ–Ω",
                'seller_name': seller_name,
                'phone_number': self._phone_number  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            }
            
            logger.info(f"‚úÖ Successfully authenticated user with INN: {inn_value}, Seller: {seller_name}")
            return True, auth_data
            
        except WBWebAuthError:
            raise
        except Exception as e:
            logger.error(f"Error verifying SMS code: {e}")
            raise WBWebAuthError(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SMS –∫–æ–¥–∞: {str(e)}")
    
    async def test_session(self, session_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            await self._ensure_browser_ready()

            current_url = self.driver.current_url or ""
            if not current_url:
                self.driver.get("https://seller.wildberries.ru/")
                await asyncio.sleep(1)
                current_url = self.driver.current_url or ""

            if 'seller-auth.wildberries.ru' in current_url:
                logger.warning("‚ùå Session invalid - driver on auth page")
                return False

            try:
                user_markers = self.driver.find_elements(By.CSS_SELECTOR, '[data-testid*="user"], [class*="header-user"], [class*="profile"]')
                if user_markers:
                    logger.info("‚úÖ Session is valid - user elements present")
                    return True
            except Exception as exc:
                logger.debug(f"Could not inspect DOM for auth markers: {exc}")

            await self.ensure_supplies_page()
            return True
        except WBWebAuthError:
            logger.warning("‚ùå Session invalid after navigation attempt")
            return False
        except Exception as e:
            logger.error(f"Error testing session: {e}")
            return False

    async def _restore_cookies_only(self, session_data: Dict):
        if not session_data.get('cookies'):
            logger.warning("No cookies in session_data to restore")
            return

        try:
            logger.info(f"üîë Restoring {len(session_data['cookies'])} cookies for user {self.user_id}")
            self.driver.delete_all_cookies()
            restored_count = 0
            for cookie in session_data['cookies']:
                cookie_copy = dict(cookie)
                if 'expiry' in cookie_copy and isinstance(cookie_copy['expiry'], float):
                    cookie_copy['expiry'] = int(cookie_copy['expiry'])
                cookie_copy.pop('sameSite', None)
                cookie_copy.pop('priority', None)
                if 'domain' not in cookie_copy or not cookie_copy['domain']:
                    cookie_copy['domain'] = '.wildberries.ru'
                if 'path' not in cookie_copy or not cookie_copy['path']:
                    cookie_copy['path'] = '/'
                try:
                    self.driver.add_cookie(cookie_copy)
                    restored_count += 1
                except Exception as exc:
                    logger.debug(f"Could not add cookie {cookie.get('name', 'unknown')}: {exc}")
            
            logger.info(f"‚úÖ Restored {restored_count}/{len(session_data['cookies'])} cookies")

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º localStorage –∏ sessionStorage
            if 'local_storage' in session_data:
                try:
                    for key, value in session_data['local_storage'].items():
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏
                        value_escaped = str(value).replace("'", "\\'").replace('"', '\\"')
                        self.driver.execute_script(f"localStorage.setItem('{key}', '{value_escaped}');")
                    logger.debug(f"Restored {len(session_data['local_storage'])} localStorage items")
                except Exception as exc:
                    logger.debug(f"Could not restore localStorage: {exc}")
            
            if 'session_storage' in session_data:
                try:
                    for key, value in session_data['session_storage'].items():
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏
                        value_escaped = str(value).replace("'", "\\'").replace('"', '\\"')
                        self.driver.execute_script(f"sessionStorage.setItem('{key}', '{value_escaped}');")
                    logger.debug(f"Restored {len(session_data['session_storage'])} sessionStorage items")
                except Exception as exc:
                    logger.debug(f"Could not restore sessionStorage: {exc}")

            logger.debug("Cookies and storage restored, refreshing page once")
            self.driver.refresh()
            await asyncio.sleep(1)
        except Exception as exc:
            logger.warning(f"Lightweight cookie restore failed: {exc}")

    async def ensure_supplies_page(self, force_reload: bool = False):
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç —Ä–∞–∑–¥–µ–ª –ø–æ—Å—Ç–∞–≤–æ–∫"""
        await self._ensure_browser_ready()

        target_url = "https://seller.wildberries.ru/supplies-management/all-supplies"
        current_url = self.driver.current_url or ""

        if 'seller-auth.wildberries.ru' in current_url:
            raise WBWebAuthError("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        if force_reload or 'supplies-management/all-supplies' not in current_url:
            logger.info(f"üåê Navigating to supplies page: {target_url}")
            self.driver.get(target_url)
        else:
            logger.info("üîÑ Refreshing supplies page for fresh data")
            self.driver.refresh()

        await asyncio.sleep(1)

        try:
            self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'table[class^="Table__table"] tbody'))
            )
            logger.info("‚úÖ Supplies page ready")
        except TimeoutException:
            current_url = self.driver.current_url or ''
            logger.error(f"‚ùå Supplies page not loaded, current URL: {current_url}")
            raise WBWebAuthError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∞–≤–æ–∫")

    async def get_unplanned_order_numbers(self, session_data: Dict) -> list[str]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤–æ–∫ –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'."""
        max_retries = 2
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ –±—Ä–∞—É–∑–µ—Ä
                await self._ensure_browser_ready()

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –∏–∑ session_data
                current_url = self.driver.current_url or ""
                if not current_url or 'seller.wildberries.ru' not in current_url:
                    # –ï—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ WB, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Ç—É–¥–∞
                    self.driver.get("https://seller.wildberries.ru/")
                    await asyncio.sleep(1)
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies
                await self._restore_cookies_only(session_data)

                # –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã,
                # —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await self.ensure_supplies_page(force_reload=True)

                # –î–∞—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                await asyncio.sleep(1)

                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
                try:
                    self.wait.until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, 'table[class^="Table__table"] tbody'))
                    )
                except TimeoutException:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–∫–∏–Ω—É–ª–æ –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    current_url = self.driver.current_url or ''
                    if 'seller-auth.wildberries.ru' in current_url:
                        logger.warning(f"Redirected to auth page, attempt {retry_count + 1}/{max_retries}")
                        if retry_count < max_retries - 1:
                            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
                            await asyncio.sleep(2)
                            retry_count += 1
                            continue
                        else:
                            raise WBWebAuthError('AUTH_REQUIRED')
                    logger.warning("Supplies table not found")
                    return []

                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                rows = self.driver.find_elements(By.CSS_SELECTOR, 'table[class^="Table__table"] tbody tr')
                order_numbers: list[str] = []

                for row in rows:
                    try:
                        # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
                        first_cell = row.find_element(By.CSS_SELECTOR, 'td:nth-child(1) .Table__td-content__OpbOC9lNW1')
                        order_text = (first_cell.text or '').strip()
                        if not order_text or order_text == '-':
                            continue

                        # –ò—â–µ–º badge —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ
                        badge_elements = row.find_elements(By.CSS_SELECTOR, '.Status-name-cell__8hNdIcukfX [data-name="Badge"], .Status-name-cell__status__CtSiazcngL [data-name="Badge"], span[data-name="Badge"]')
                        status_text = ''
                        if badge_elements:
                            status_text = (badge_elements[-1].text or '').strip().lower()
                        else:
                            # –§–æ–ª–±—ç–∫: –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ —è—á–µ–π–∫–∞—Ö –±–ª–∏–∂–µ –∫ –∫–æ–Ω—Ü—É
                            try:
                                status_cell = row.find_elements(By.CSS_SELECTOR, 'td')[-2]
                                status_text = (status_cell.text or '').strip().lower()
                            except Exception:
                                status_text = ''

                        if '–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ' in status_text:
                            order_numbers.append(order_text)
                    except Exception:
                        continue

                logger.info(f"Successfully retrieved {len(order_numbers)} unplanned orders")
                return order_numbers

            except WBWebAuthError as e:
                if str(e) == 'AUTH_REQUIRED':
                    raise
                logger.error(f"WBWebAuthError in get_unplanned_order_numbers: {e}")
                return []
            except Exception as e:
                logger.error(f"Error collecting unplanned order numbers (attempt {retry_count + 1}): {e}")
                if retry_count < max_retries - 1:
                    retry_count += 1
                    await asyncio.sleep(2)
                    continue
                else:
                    return []
        
        return []


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
_user_wb_auth_services: Dict[int, WBWebAuthService] = {}


def get_wb_auth_service(user_id: int = None) -> WBWebAuthService:
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –ï—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    """
    global _user_wb_auth_services
    
    # –ï—Å–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if user_id is None:
        return WBWebAuthService()
    
    # –ï—Å–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if user_id not in _user_wb_auth_services:
        logger.info(f"Creating new WBWebAuthService for user {user_id}")
        _user_wb_auth_services[user_id] = WBWebAuthService(user_id=user_id)
    
    return _user_wb_auth_services[user_id]


async def cleanup_wb_auth_service(user_id: int = None):
    """
    –û—á–∏—Å—Ç–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –ï—Å–ª–∏ None, –æ—á–∏—â–∞—é—Ç—Å—è –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    """
    global _user_wb_auth_services
    
    if user_id is None:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        logger.info(f"Cleaning up all {len(_user_wb_auth_services)} WBWebAuthService instances")
        for service in _user_wb_auth_services.values():
            await service.close_session()
        _user_wb_auth_services.clear()
    elif user_id in _user_wb_auth_services:
        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"Cleaning up WBWebAuthService for user {user_id}")
        await _user_wb_auth_services[user_id].close_session()
        del _user_wb_auth_services[user_id]
